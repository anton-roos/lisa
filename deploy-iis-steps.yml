# deploy-iis-steps.yml
parameters:
  siteName: ''
  appPool: ''
  hostHeader: ''          # renamed from "host"
  packagePath: '$(Pipeline.Workspace)\drop\WebApp.zip'
  physicalPath: ''
  httpPort: 80
  enableHttps: false
  httpsPort: 443
  certThumbprint: ''

steps:
- powershell: |
    $ErrorActionPreference = 'Stop'

    $pkg          = "${{ parameters.packagePath }}"
    $siteName     = "${{ parameters.siteName }}"
    $appPool      = "${{ parameters.appPool }}"
    $hostHeader   = "${{ parameters.hostHeader }}"
    $httpPort     = [int]"${{ parameters.httpPort }}"
    $enableHttps  = [bool]("${{ parameters.enableHttps }}")
    $httpsPort    = [int]"${{ parameters.httpsPort }}"
    $thumb        = "${{ parameters.certThumbprint }}"
    $physicalPath = "${{ parameters.physicalPath }}"
    if ([string]::IsNullOrWhiteSpace($physicalPath)) { $physicalPath = "C:\inetpub\wwwroot\$siteName" }

    $bindHttp  = "*:${httpPort}:${hostHeader}"
    $bindHttps = "*:${httpsPort}:${hostHeader}"

    Import-Module WebAdministration

    if (-not (Test-Path "IIS:\AppPools\$appPool")) { New-Item "IIS:\AppPools\$appPool" | Out-Null }
    Set-ItemProperty "IIS:\AppPools\$appPool" -Name managedRuntimeVersion -Value ""
    Set-ItemProperty "IIS:\AppPools\$appPool" -Name startMode -Value "AlwaysRunning"
    Set-ItemProperty "IIS:\AppPools\$appPool" -Name recycling.periodicRestart.time -Value ([TimeSpan]::Zero)

    if (-not (Test-Path $physicalPath)) { New-Item -ItemType Directory -Path $physicalPath -Force | Out-Null }

    if (-not (Test-Path "IIS:\Sites\$siteName")) {
      New-Item "IIS:\Sites\$siteName" -physicalPath $physicalPath -bindings @{ protocol='http'; bindingInformation=$bindHttp } | Out-Null
    }

    $hasHttp = Get-WebBinding -Name $siteName -Protocol http | Where-Object { $_.bindingInformation -like $bindHttp }
    if (-not $hasHttp) { New-WebBinding -Name $siteName -Protocol http -Port $httpPort -HostHeader $hostHeader | Out-Null }

    if ($enableHttps -and -not [string]::IsNullOrWhiteSpace($thumb)) {
      $hasHttps = Get-WebBinding -Name $siteName -Protocol https | Where-Object { $_.bindingInformation -like $bindHttps }
      if (-not $hasHttps) { New-WebBinding -Name $siteName -Protocol https -Port $httpsPort -HostHeader $hostHeader | Out-Null }
      $bindingPath = "IIS:\SslBindings\!${httpsPort}!${hostHeader}"
      if (-not (Test-Path $bindingPath)) { New-Item $bindingPath -Thumbprint $thumb -SSLFlags 1 | Out-Null }
      else { Set-Item $bindingPath -Thumbprint $thumb -SSLFlags 1 }
    }

    Set-ItemProperty "IIS:\Sites\$siteName" -Name applicationPool -Value $appPool

    Stop-Website -Name $siteName -ErrorAction SilentlyContinue

    $msdeploy = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
    if (-not (Test-Path $msdeploy)) { throw "msdeploy not found at: $msdeploy" }

    # Build setParam as ONE argument token
    $setParam = "-setParam:name=`"IIS Web Application Name`",value=`"$siteName`""

    # Optional: show exactly what weâ€™ll pass
    Write-Host "msdeploy args:"
    Write-Host "  -verb:sync"
    Write-Host "  -source:package=$pkg"
    Write-Host "  -dest:auto,computerName=localhost,authType=NTLM"
    Write-Host "  $setParam"

    & $msdeploy `
      -verb:sync `
      "-source:package=$pkg" `
      "-dest:auto,computerName=localhost,authType=NTLM" `
      $setParam `
      -disableLink:AppPoolExtension `
      -disableLink:ContentExtension `
      -disableLink:CertificateExtension `
      "-skip:objectName=filePath,absolutePath=appsettings\.json$" `
      "-skip:objectName=filePath,absolutePath=.*\\appsettings\.json$" `
      "-skip:objectName=dirPath,absolutePath=.*\\runtimes\\.*\\lib\\.*" `
      "-skip:objectName=filePath,absolutePath=.*\\runtimes\\.*\\native\\.*" `
      "-skip:objectName=filePath,absolutePath=.*\.pdb$" `
      "-skip:objectName=filePath,absolutePath=.*\.xml$" `
      "-skip:objectName=filePath,absolutePath=.*\\ref\\.*\.dll$" `
      "-skip:objectName=dirPath,absolutePath=.*\\cs\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\de\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\es\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\fr\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\it\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\ja\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\ko\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\pl\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\pt-BR\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\ru\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\tr\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\zh-Hans\\.*" `
      "-skip:objectName=dirPath,absolutePath=.*\\zh-Hant\\.*"


    Start-Website -Name $siteName
  displayName: "Ensure IIS site/app pool & deploy"
