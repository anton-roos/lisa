@page "/assessment-types"
@using Lisa.Models.Entities
@inject AssessmentTypeService AssessmentTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<PageTitle>Assessment Types</PageTitle>
<h3>Assessment Types</h3>

@if (_loading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!AssessmentTypes.Any())
{
    <p>No assessment types found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var type in AssessmentTypes)
            {
                <tr>
                    <td>@type.Id</td>
                    <td>@type.Name</td>
                    <td>
                        <button class="btn btn-link" @onclick="@(() => EditAssessmentType(type.Id))">Edit</button>
                        <button class="btn btn-link text-danger" @onclick="@(() => DeleteAssessmentType(type.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="CreateAssessmentType">Create New Assessment Type</button>
</div>

@code {
    private List<AssessmentType> AssessmentTypes { get; set; } = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentTypes();
    }

    private async Task LoadAssessmentTypes()
    {
        try
        {
            _loading = true;
            AssessmentTypes = await AssessmentTypeService.GetAssessmentTypesAsync();
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void EditAssessmentType(int id)
    {
        Navigation.NavigateTo($"/assessment-types/manage/{id}");
    }

    private void CreateAssessmentType()
    {
        Navigation.NavigateTo("/assessment-types/manage");
    }

    private async Task DeleteAssessmentType(int id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete assessment type {id}?");
        if (confirmed)
        {
            try
            {
                _loading = true;
                await InvokeAsync(StateHasChanged);
                await AssessmentTypeService.DeleteAssessmentTypeAsync(id);
                await LoadAssessmentTypes();
            }
            finally
            {
                _loading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
