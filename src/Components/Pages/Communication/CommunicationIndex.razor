@page "/communication"
@using Lisa.Enums
@using Lisa.Models.Entities
@using Lisa.Models.EmailModels
@using Lisa.Components.Layout.Communciation
@inject SchoolService SchoolService
@inject SchoolGradeService SchoolGradeService
@inject SubjectService SubjectService
@inject LearnerService LearnerService
@inject EmailCampaignService EmailCampaignService
@inject NavigationManager NavigationManager

@inherits EventAwareComponentBase

<PageTitle>Send Communication</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement}")">
    <Authorized>
        <h3>Send Communication</h3>
        @if (SelectedSchool is null)
        {
            <NoSchoolSelected Message="Please select a school to send communication." />
        }
        else
        {
            <div class="row mb-3">

                <div class="col-md-4">
                    <label for="fromDate" class="form-label">From Date</label>
                    <input id="fromDate" type="date" class="form-control" @bind="_fromDate"
                        @oninput="async () => await OnDateRangeChange()" />
                </div>

                <div class="col-md-4">
                    <label for="toDate" class="form-label">To Date</label>
                    <input id="toDate" type="date" class="form-control" @bind="_toDate"
                        @oninput="async () => await OnDateRangeChange()" />
                </div>
            </div>
            <RecipientGroupSelector SelectedGroup="@RecipientGroup" OnGroupChanged="OnOptionChanged" />

            @switch (RecipientGroup)
            {
                case RecipientGroup.School:
                    <div class="mb-3">
                        <label for="templateSelect">Select Template</label>
                        <InputSelect id="templateSelect" class="form-select" TValue="RecipientTemplate"
                            @bind-Value="RecipientTemplate">
                            <option value="@RecipientTemplate.None">-- Select Template --</option>
                            @foreach (RecipientTemplate t in Enum.GetValues(typeof(RecipientTemplate)))
                            {
                                <option value="@t">@t</option>
                            }
                        </InputSelect>
                    </div>
                    @if (RecipientTemplate != RecipientTemplate.None)
                    {
                        <div class="mb-3">
                            <label for="audienceSelect">Select Audience</label>
                            <InputSelect id="audienceSelect" class="form-select" TValue="RecipientType" @bind-Value="RecipientType">
                                <option value="@RecipientType.None">-- Select Audience --</option>
                                @foreach (RecipientType audience in Enum.GetValues(typeof(RecipientType)))
                                {
                                    <option value="@audience">@audience</option>
                                }
                            </InputSelect>
                        </div>
                    }
                    break;
                case RecipientGroup.SchoolGrade:
                    <div class="mb-3">
                        <label for="templateSelect">Select Template</label>
                        <InputSelect id="templateSelect" class="form-select" TValue="RecipientTemplate"
                            @bind-Value="RecipientTemplate">
                            <option value="@RecipientTemplate.None">-- Select Template --</option>
                            @foreach (RecipientTemplate t in Enum.GetValues(typeof(RecipientTemplate)))
                            {
                                <option value="@t">@t</option>
                            }
                        </InputSelect>
                    </div>
                    @if (RecipientTemplate != RecipientTemplate.None)
                    {
                        <div class="mb-3">
                            <label for="gradeSelect">Select Grade</label>
                            <InputSelect id="gradeSelect" class="form-select" @bind-Value="GradeId">
                                <option value="">-- Select Grade --</option>
                                @foreach (var grade in _schoolGrades)
                                {
                                    <option value="@grade.Id">@grade.SystemGrade.Name</option>
                                }
                            </InputSelect>
                        </div>

                        @if (GradeId != null)
                        {
                            <div class="mb-3">
                                <label for="audienceSelect">Select Audience</label>
                                <InputSelect id="audienceSelect" class="form-select" TValue="RecipientType" @bind-Value="RecipientType">
                                    <option value="@RecipientType.None">-- Select Audience --</option>
                                    @foreach (RecipientType audience in Enum.GetValues(typeof(RecipientType)))
                                    {
                                        <option value="@audience">@audience</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    }
                    break;
                case RecipientGroup.Subject:
                    <div class="mb-3">
                        <label for="templateSelect">Select Template</label>
                        <InputSelect id="templateSelect" class="form-select" TValue="RecipientTemplate"
                            @bind-Value="RecipientTemplate">
                            <option value="@RecipientTemplate.None">-- Select Template --</option>
                            @foreach (RecipientTemplate t in Enum.GetValues(typeof(RecipientTemplate)))
                            {
                                <option value="@t">@t</option>
                            }
                        </InputSelect>
                    </div>
                    @if (RecipientTemplate != RecipientTemplate.None)
                    {
                        <div class="mb-3">
                            <label for="audienceSelect">Select Audience</label>
                            <InputSelect id="audienceSelect" class="form-select" TValue="RecipientType" @bind-Value="RecipientType">
                                <option value="@RecipientType.None">-- Select Audience --</option>
                                @foreach (RecipientType audience in Enum.GetValues(typeof(RecipientType)))
                                {
                                    <option value="@audience">@audience</option>
                                }
                            </InputSelect>
                        </div>

                        @if (RecipientType != RecipientType.None)
                        {
                            <div class="mb-3">
                                <label for="subjectSelect">Select Subject</label>
                                <InputSelect id="subjectSelect" class="form-select" @bind-Value="SubjectId">
                                    <option value="0">-- Select Subject --</option>
                                    @foreach (var subject in _subjects)
                                    {
                                        <option value="@subject.Id">@subject.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    }
                    break;
                case RecipientGroup.Learner:
                    <div class="mb-3">
                        <label for="templateSelect">Select Template</label>
                        <InputSelect id="templateSelect" class="form-select" TValue="RecipientTemplate"
                            @bind-Value="RecipientTemplate">
                            <option value="@RecipientTemplate.None">-- Select Template --</option>
                            @foreach (RecipientTemplate t in Enum.GetValues(typeof(RecipientTemplate)))
                            {
                                <option value="@t">@t</option>
                            }
                        </InputSelect>
                    </div>
                    @if (RecipientTemplate != RecipientTemplate.None)
                    {
                        <div class="mb-3">
                            <label for="audienceSelect">Select Audience</label>
                            <InputSelect id="audienceSelect" class="form-select" TValue="RecipientType" @bind-Value="RecipientType">
                                <option value="@RecipientType.None">-- Select Audience --</option>
                                @foreach (RecipientType audience in Enum.GetValues(typeof(RecipientType)))
                                {
                                    <option value="@audience">@audience</option>
                                }
                            </InputSelect>
                        </div>

                        @if (RecipientType != RecipientType.None)
                        {
                            <div class="mb-3">
                                <label for="learnerSearch">Search by Name:</label>
                                <input id="learnerSearch" type="text" class="form-control" placeholder="Enter learner name..."
                                    @bind="SearchTerm" @bind:event="oninput" />
                            </div>

                            @if (IsLoading)
                            {
                                <div class="text-center">
                                    <i class="bi bi-hourglass-split text-primary"></i> Loading...
                                </div>
                            }
                            else if (!FilteredLearners.Any())
                            {
                                <div class="text-center text-muted">No learners found.</div>
                            }
                            else
                            {
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Grade</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var learner in FilteredLearners)
                                        {
                                            <tr>
                                                <td>@learner.Surname @learner.Name</td>
                                                <td>@learner.RegisterClass?.SchoolGrade?.SystemGrade.Name</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm"
                                                        @onclick="async () => { SelectedLearner = learner; await CreateEmailCampaign(); }"
                                                        disabled="@IsSending">
                                                        @if (IsSending)
                                                        {
                                                            <i class="bi bi-hourglass-split">Sending...</i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-envelope-fill">Send Communication</i>
                                                        }
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        }
                    }
                    break;
            }

            @if (RecipientGroup != RecipientGroup.Learner)
            {
                <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="CreateEmailCampaign"
                    disabled="@(IsSendDisabled || IsSending)">
                    @if (IsSending)
                    {
                        <i class="bi bi-hourglass-split">Sending...</i>
                    }
                    else
                    {
                        <i class="bi bi-envelope-arrow-up">Send Communication</i>
                    }
                </button>
            }

            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="alert alert-info mt-2">@StatusMessage</div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private RecipientGroup RecipientGroup { get; set; } = RecipientGroup.School;
    private string? SearchTerm { get; set; }
    private List<Learner> _learners = [];
    private IEnumerable<Learner> FilteredLearners => ApplyFilters();
    private School? SelectedSchool { get; set; }
    private Guid? GradeId { get; set; }
    private RecipientType RecipientType { get; set; } = RecipientType.None;
    private List<SchoolGrade> _schoolGrades = [];
    private List<Subject> _subjects = [];
    private int SubjectId { get; set; }
    private RecipientTemplate RecipientTemplate { get; set; } = RecipientTemplate.None;
    private bool IsSendDisabled => RecipientTemplate == RecipientTemplate.None;
    private bool IsSending { get; set; }
    private string? StatusMessage { get; set; }
    private bool IsLoading { get; set; } = false;
    public IEnumerable<Learner> Learners { get; set; } = [];
    public Learner? SelectedLearner { get; set; }
    private DateTime? _fromDate;
    private DateTime? _toDate;

    protected override async Task OnInitializedAsync()
    {
        SelectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadData();
        await base.OnInitializedAsync();
    }
    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        if (eventName == UiEvents.SchoolSelected && payload is School school)
        {
            if (SelectedSchool?.Id != school.Id)
            {
                SelectedSchool = school;
                await LoadData();
            }
        }
        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadData()
    {
        if (SelectedSchool == null) return;

        _learners = await LearnerService.GetBySchoolAsync(SelectedSchool.Id);
        _schoolGrades = await SchoolGradeService.GetGradesForSchool(SelectedSchool.Id);
        _subjects = await SubjectService.GetAllAsync();
    }

    private IEnumerable<Learner> ApplyFilters()
    {
        if (!_learners.Any()) return [];

        var query = _learners.AsEnumerable();

        if (GradeId.HasValue)
            query = query.Where(l => l.RegisterClass?.SchoolGrade?.Id == GradeId);

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            var term = SearchTerm.Trim().ToLower();
            query = query.Where(l => $"{l.Surname} {l.Name}".ToLower().Contains(term));
        }

        return query;
    }

    private void OnOptionChanged(RecipientGroup recipientGroup)
    {
        RecipientTemplate = RecipientTemplate.None;
        RecipientType = RecipientType.None;
        RecipientGroup = recipientGroup;
    }

    private async Task CreateEmailCampaign()
    {
        if (RecipientTemplate == RecipientTemplate.None || SelectedSchool == null)
        {
            StatusMessage = "Error: Please select a template and a school!";
            return;
        }

        if (RecipientGroup == RecipientGroup.Learner)
        {
            if (SelectedLearner == null)
            {
                StatusMessage = "Error: Please select a learner to send communication to their parents.";
                return;
            }
        }

        // Ensure dates are UTC before sending to the service
        DateTime? fromDateUtc = _fromDate.HasValue ? DateTime.SpecifyKind(_fromDate.Value, DateTimeKind.Utc) : null;
        DateTime? toDateUtc = _toDate.HasValue ? DateTime.SpecifyKind(_toDate.Value, DateTimeKind.Utc) : null;

        var communicationCommand = new CommunicationCommand
        {
            RecipientGroup = RecipientGroup,
            RecipientType = RecipientType,
            RecipientTemplate = RecipientTemplate,
            GradeId = GradeId,
            SubjectId = SubjectId,
            SchoolId = SelectedSchool.Id,
            LearnerId = RecipientGroup == RecipientGroup.Learner ? SelectedLearner?.Id : null,
            FromDate = fromDateUtc,
            ToDate = toDateUtc
        };

        IsSending = true;
        StatusMessage = "Creating email campaign...";

        try
        {
            var result = await EmailCampaignService.CreateAsync(communicationCommand);
            NavigateToCampaign(result.Id);
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsSending = false;
        }
    }

    private void NavigateToCampaign(Guid campaignId)
    {
        NavigationManager.NavigateTo($"/email-campaign/{campaignId}");
    }

    private async Task OnDateRangeChange()
    {
        // Convert dates to UTC to avoid PostgreSQL timezone issues
        if (_fromDate.HasValue)
        {
            _fromDate = DateTime.SpecifyKind(_fromDate.Value, DateTimeKind.Utc);
        }
        
        if (_toDate.HasValue)
        {
            _toDate = DateTime.SpecifyKind(_toDate.Value, DateTimeKind.Utc);
        }
        
        await InvokeAsync(StateHasChanged);
    }
}
