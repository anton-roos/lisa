@page "/login"
@using Lisa.Middleware
@using Lisa.Models.Entities
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject ILogger<Login> Logger
@inject ILoginStore LoginStore

<h3>Login</h3>

@if (_isLoading)
{
    <div>
        <label>Email</label>
        <div class="skeleton-text"></div>
    </div>

    <div>
        <label>Password</label>
        <div class="skeleton-text"></div>
    </div>
}
else
{
    <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
        <DataAnnotationsValidator />

        <div>
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="_loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => _loginModel.Email)" />
        </div>

        <div>
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="_loginModel.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => _loginModel.Password)" />
        </div>

        @if (!string.IsNullOrEmpty(_loginError))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert" @onclick="() => _loginError = string.Empty">
                @_loginError
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => _loginError = string.Empty"></button>
            </div>
        }

        <button type="submit" class="btn btn-primary mt-3" disabled="@_isLoading">
            @(_isLoading ? "Logging in..." : "Log in")
        </button>
    </EditForm>
}

@code {
    private readonly LoginModel _loginModel = new();
    private string _loginError = string.Empty;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        _isLoading = true;

        try
        {
            var user = await UserManager.FindByEmailAsync(_loginModel.Email!);
            if (user == null)
            {
                _loginError = "Invalid email or password.";
                return;
            }

            var canSignIn = await SignInManager.CanSignInAsync(user);
            Logger.LogInformation($"CanSignIn result: {canSignIn}");

            var isLockedOut = await UserManager.IsLockedOutAsync(user);
            Logger.LogInformation($"IsLockedOut result: {isLockedOut}");

            var isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);
            Logger.LogInformation($"IsEmailConfirmed: {isEmailConfirmed}");

            var identityErrors = await UserManager.GetUserAsync(new ClaimsPrincipal(new ClaimsIdentity([
                new Claim(ClaimTypes.Email, user.Email ?? string.Empty)
            ], "custom")));

            Logger.LogInformation($"UserManager Check: {identityErrors}");

            if (!canSignIn)
            {
                _loginError = "Can't sign in.";
                return;
            }

            if (isLockedOut)
            {
                _loginError = "Account is locked out.";
                return;
            }

            var result = await SignInManager.CheckPasswordSignInAsync(user, _loginModel.Password!, false);
            if (!result.Succeeded)
            {
                _loginError = "Invalid email or password.";
                return;
            }

            var key = LoginStore.StoreLoginInfo(_loginModel.Email!, _loginModel.Password!);
            NavigationManager.NavigateTo($"/login?key={key}", true);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Login error: {ex.Message}");
            _loginError = "An error occurred while logging in. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
    }
}
