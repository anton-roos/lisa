@page "/register-class"
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject RegisterClassService RegisterClassService
@inject NavigationManager NavigationManager
@inherits EventAwareComponentBase
@inject ILogger<RegisterClassList> Logger

<PageTitle>Care Group Details</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        <h3>Register Classes</h3>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to view register classes." />
        }
        else if (!_registerClasses.Any())
        {
            <div>
                <h3>Register Classes</h3>
                <button class="btn btn-primary mb-3" @onclick="AddRegisterClass">Add Register Class</button>
                <div class="alert alert-info">
                    No register classes found for <strong>@_selectedSchool.ShortName</strong>.
                </div>
            </div>
        }
        else
        {
            <button class="btn btn-primary mb-3" @onclick="AddRegisterClass">Add Register Class</button>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Grade</th>
                        <th>Learner Count</th>
                        <th>Teacher</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var registerClass in _registerClasses)
                    {
                        <tr>
                            <td>@registerClass.Name</td>
                            @if (registerClass.SchoolGrade != null)
                            {
                                <td>@registerClass.SchoolGrade.SystemGrade.Name</td>
                            }
                            else
                            {
                                <td>Grade not found</td>
                            }
                            @if (registerClass.Learners != null)
                            {
                                <td>@registerClass.Learners.Count.ToString()</td>
                            }
                            else
                            {
                                <td>Learners not found</td>
                            }
                            @if (registerClass.User != null)
                            {
                                <td>@registerClass.User.Surname @registerClass.User.Name</td>
                            }
                            else
                            {
                                <td>Teacher not found</td>
                            }
                            <ActionButtons TEntity="RegisterClass" Entity="registerClass" OnView="ViewRegisterClass"
                                OnEdit="EditRegisterClass" OnDelete="ShowConfirmationAsync" />
                        </tr>
                    }
                </tbody>
            </table>

            <ConfirmDialog @ref="_dialog" />
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private School? _selectedSchool;
    private List<RegisterClass> _registerClasses = [];
    private ConfirmDialog _dialog = null!;

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadRegisterClasses();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                _selectedSchool = payload as School;
                await LoadRegisterClasses();
                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadRegisterClasses()
    {
        var unfiltedRegisterClasses = await RegisterClassService.GetAllAsync();
        if (_selectedSchool == null)
        {
            Logger.LogError("SelectedSchool was null when trying to load register classes.");
            return;
        }

        _registerClasses = unfiltedRegisterClasses
            .Where(rc => rc.SchoolGrade != null && rc.SchoolGrade.SchoolId == _selectedSchool.Id)
            .ToList();
    }

    private void EditRegisterClass(RegisterClass registerClass)
    {
        NavigationManager.NavigateTo($"/register-class/manage/{registerClass.Id}");
    }

    private void ViewRegisterClass(RegisterClass registerClass)
    {
        NavigationManager.NavigateTo($"/register-class/details/{registerClass.Id}");
    }

    private async Task ShowConfirmationAsync(RegisterClass? registerClass)
    {
        var confirmation = await _dialog.ShowAsync(
        title: "Are you sure you want to delete this?",
        message1: "This will delete the record. Once deleted can not be rolled back.",
        message2: "Do you want to proceed?");

        if (confirmation)
        {
            if (registerClass != null)
            {
                await RegisterClassService.DeleteAsync(registerClass.Id);
                await LoadRegisterClasses();
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
        }
    }

    private void AddRegisterClass()
    {
        NavigationManager.NavigateTo("/register-class/manage/");
    }
}
