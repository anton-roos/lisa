@page "/subjects/details/{Id:guid}"
@using Lisa.Models.Entities
@inject SubjectService SubjectService
@inject NavigationManager Navigation
@inject ILogger<SubjectDetails> Logger

<h2>Subject Details</h2>

@if (_isLoading)
{
    <p>Loading subject details...</p>
}
else if (_subject == null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> Subject not found.
    </div>
}
else
{
    <div class="mb-3">
        <label class="form-label"><strong>Name:</strong></label>
        <p>@_subject.Name</p>
    </div>

    <div class="mb-3">
        <label class="form-label"><strong>Code:</strong></label>
        <p>@_subject.Code</p>
    </div>

    <div class="mb-3">
        <label class="form-label"><strong>Description:</strong></label>
        <p>@_subject.Description</p>
    </div>

    <div class="mt-4">
        <button class="btn btn-primary" @onclick="EditSubject">Edit</button>
        <button class="btn btn-secondary" @onclick="BackToList">Back to List</button>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private Subject? _subject;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _subject = await SubjectService.GetByIdAsync(Id);
            if (_subject == null)
            {
                // Handle the case where the subject is not found
                Navigation.NavigateTo("/subjects");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error fetching subject details: {ex.Message}", ex.Message);
            Navigation.NavigateTo("/subjects");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void EditSubject()
    {
        Navigation.NavigateTo($"/subjects/edit/{Id}");
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/subjects");
    }
}
