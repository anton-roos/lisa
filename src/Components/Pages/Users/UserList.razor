@page "/users"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject SchoolService SchoolService
@inject UserService UserService
@inherits EventAwareComponentBase

<PageTitle>Staff</PageTitle>
<AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        <h3>Staff</h3>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to to manage staff." />
        }
        else if (_users == null)
        {
            <LoadingSpinner />
        }
        else
        {
            <button class="btn btn-primary mb-3" @onclick="GoToAddUser" disabled="@(_selectedSchool == null)">
                Add Staff Member
             </button>
            <div class="mb-3 d-flex flex-wrap align-items-center">
                <!-- Search Filter -->
                <div class="me-3">
                    <input type="text" class="form-control" placeholder="Search users..." @bind="_searchQuery"
                           @oninput="FilterUsers">
                </div>

                <!-- Role Filter Buttons -->
                <button class="btn @(_selectedRole == null ? "btn-primary" : "btn-secondary") me-2"
                        @onclick="ClearRoleFilter">
                    All Roles
                </button>

                @foreach (var role in _availableRoles)
                {
                    <button class="btn @(_selectedRole == role ? "btn-primary" : "btn-secondary") me-2"
                            @onclick="() => SelectRole(role)">
                        @role
                    </button>
                }
            </div>

            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
                @if (!FilteredUsers.Any())
                {
                    <div class="col-12">
                        <p>No users found matching your search/filter.</p>
                    </div>
                }
                else
                {
                    @foreach (var user in FilteredUsers)
                    {
                        <div class="col">
                            <div class="card shadow-sm">
                                <div class="card-body">
                                    <h5 class="card-title">
                                        @if (!string.IsNullOrWhiteSpace(user.Abbreviation))
                                        {
                                            <span class="badge bg-secondary me-2">@user.Abbreviation</span>
                                        }
                                        @user.Surname @user.Name
                                    </h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@user.Email</h6>

                                    <div class="mb-2">
                                        @foreach (var role in user.Roles)
                                        {
                                            <span class="badge bg-primary me-1">@role</span>
                                        }
                                    </div>

                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-sm btn-secondary" @onclick="() => EditUser(user.Id)">
                                            Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user)">Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private School? _selectedSchool;
    private List<User>? _users;
    private string? _selectedRole;
    private string _searchQuery = string.Empty;

    private readonly List<string> _availableRoles =
    [
        Roles.Principal,
        Roles.Administrator,
        Roles.SchoolManagement,
        Roles.SystemAdministrator,
        Roles.Teacher,
        Roles.Attendance,
        Roles.Reception
    ];

    private bool _isCurrentUserSystemAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        _isCurrentUserSystemAdmin = user.IsInRole(Roles.SystemAdministrator);

        if (!_isCurrentUserSystemAdmin)
        {
            _availableRoles.Remove(Roles.SystemAdministrator);
        }

        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);

        if (_selectedSchool != null)
        {
            await LoadUsers();
        }
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                if (payload is School school)
                {
                    _selectedSchool = school;
                    await LoadUsers();
                }

                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadUsers()
    {
        if (_selectedSchool == null)
            throw new InvalidOperationException("No school selected.");

        _users = await UserService.GetAllByRoleAndSchoolAsync(_availableRoles.ToArray(), _selectedSchool.Id);

        if (!_isCurrentUserSystemAdmin && _users != null)
        {
            _users = _users.Where(u => !u.Roles.Contains(Roles.SystemAdministrator)).ToList();
        }
    }

    private IEnumerable<User> FilteredUsers =>
        _users == null
            ? []
            : _users.Where(u =>
                (_selectedRole == null || u.Roles.Contains(_selectedRole)) &&
                (string.IsNullOrWhiteSpace(_searchQuery) ||
                 u.Name!.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                 u.Surname!.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                 (u.Abbreviation?.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
                ));

    private void FilterUsers(ChangeEventArgs e)
    {
        _searchQuery = e.Value?.ToString() ?? string.Empty;
    }

    private void SelectRole(string role)
    {
        _selectedRole = _selectedRole == role ? null : role;
    }

    private void ClearRoleFilter()
    {
        _selectedRole = null;
    }

    private void GoToAddUser()
    {
        Navigation.NavigateTo("/users/manage");
    }

    private void EditUser(Guid userId)
    {
        Navigation.NavigateTo($"/users/manage/{userId}");
    }

    private async Task DeleteUser(User user)
    {
        await UserService.DeleteAsync(user.Id);
        await LoadUsers();
        await InvokeAsync(StateHasChanged);
    }
}
