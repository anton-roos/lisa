// <auto-generated />
using System;
using System.Collections.Generic;
using Lisa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lisa.Migrations
{
    [DbContext(typeof(LisaDbContext))]
    [Migration("20250203132250_InitialCreate4")]
    partial class InitialCreate4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CombinationSubject", b =>
                {
                    b.Property<Guid>("CombinationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("CombinationId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CombinationSubject");
                });

            modelBuilder.Entity("Lisa.Models.Entities.BugReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("UserAuthenticated")
                        .HasColumnType("boolean");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<string>("WhatHappened")
                        .HasColumnType("text");

                    b.Property<string>("WhatTried")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BugReports");
                });

            modelBuilder.Entity("Lisa.Models.Entities.CareGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CareGroups");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Combination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CombinationType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolGradeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SchoolGradeId");

                    b.ToTable("Combinations");
                });

            modelBuilder.Entity("Lisa.Models.Entities.EmailCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("text");

                    b.Property<string>("ContentText")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StatsClickCount")
                        .HasColumnType("integer");

                    b.Property<int>("StatsOpenCount")
                        .HasColumnType("integer");

                    b.Property<int>("StatsSentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SubjectLine")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("TrackClicks")
                        .HasColumnType("boolean");

                    b.Property<bool>("TrackOpens")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailCampaigns", (string)null);
                });

            modelBuilder.Entity("Lisa.Models.Entities.EmailRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BouncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("EmailCampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LearnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UnsubscribedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmailCampaignId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailRecipients", (string)null);
                });

            modelBuilder.Entity("Lisa.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Lisa.Models.Entities.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventData")
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Learner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CareGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("CellNumber")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("CombinationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("RegisterClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CareGroupId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CombinationId");

                    b.HasIndex("RegisterClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Learners");
                });

            modelBuilder.Entity("Lisa.Models.Entities.LearnerSubject", b =>
                {
                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("LearnerSubjectType")
                        .HasColumnType("integer");

                    b.HasKey("LearnerId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("LearnerSubjects");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCellNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryCellNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.HasIndex("PrimaryEmail");

                    b.HasIndex("SecondaryEmail");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SchoolGradeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SchoolGradeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "StartTime", "EndTime")
                        .IsUnique();

                    b.ToTable("Periods", t =>
                        {
                            t.HasCheckConstraint("CK_Period_StartTime_EndTime", "\"StartTime\" < \"EndTime\"");
                        });
                });

            modelBuilder.Entity("Lisa.Models.Entities.RegisterClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("MathSelectionEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolGradeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SchoolGradeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("RegisterClasses");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Absent")
                        .HasColumnType("boolean");

                    b.Property<string>("AbsentReason")
                        .HasColumnType("text");

                    b.Property<string>("AssessmentTopic")
                        .HasColumnType("text");

                    b.Property<string>("AssessmentType")
                        .HasColumnType("text");

                    b.Property<string>("CapturedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Lisa.Models.Entities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("LongName")
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolCurriculumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SmtpEmail")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolCurriculumId");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolCurriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SchoolCurriculums");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<int>("SystemGradeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SystemGradeId");

                    b.HasIndex("SchoolId", "SystemGradeId")
                        .IsUnique();

                    b.ToTable("SchoolGrades");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SchoolTypes");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<int>>("GradesApplicable")
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SystemGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CombinationGrade")
                        .HasColumnType("boolean");

                    b.Property<bool>("MathGrade")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SystemGrades");
                });

            modelBuilder.Entity("Lisa.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RegisterClassCompulsorySubject", b =>
                {
                    b.Property<Guid>("RegisterClassId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("RegisterClassId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("RegisterClassCompulsorySubject");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Administrator", b =>
                {
                    b.HasBaseType("Lisa.Models.Entities.User");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Principal", b =>
                {
                    b.HasBaseType("Lisa.Models.Entities.User");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("Principal");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolManagement", b =>
                {
                    b.HasBaseType("Lisa.Models.Entities.User");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("SchoolManagement");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Teacher", b =>
                {
                    b.HasBaseType("Lisa.Models.Entities.User");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("CombinationSubject", b =>
                {
                    b.HasOne("Lisa.Models.Entities.Combination", null)
                        .WithMany()
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lisa.Models.Entities.CareGroup", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("CareGroups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Teacher", "Teacher")
                        .WithMany("CareGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Combination", b =>
                {
                    b.HasOne("Lisa.Models.Entities.SchoolGrade", "SchoolGrade")
                        .WithMany("Combinations")
                        .HasForeignKey("SchoolGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolGrade");
                });

            modelBuilder.Entity("Lisa.Models.Entities.EmailRecipient", b =>
                {
                    b.HasOne("Lisa.Models.Entities.EmailCampaign", "EmailCampaign")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("EmailCampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lisa.Models.Entities.Learner", "Learner")
                        .WithMany("EmailReceipts")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lisa.Models.Entities.Parent", "Parent")
                        .WithMany("EmailReceipts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lisa.Models.Entities.User", "User")
                        .WithMany("EmailReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmailCampaign");

                    b.Navigation("Learner");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Learner", b =>
                {
                    b.HasOne("Lisa.Models.Entities.CareGroup", "CareGroup")
                        .WithMany("CareGroupMembers")
                        .HasForeignKey("CareGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lisa.Models.Entities.Combination", "Combination")
                        .WithMany()
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lisa.Models.Entities.RegisterClass", "RegisterClass")
                        .WithMany("Learners")
                        .HasForeignKey("RegisterClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("Learners")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareGroup");

                    b.Navigation("Combination");

                    b.Navigation("RegisterClass");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Lisa.Models.Entities.LearnerSubject", b =>
                {
                    b.HasOne("Lisa.Models.Entities.Learner", "Learner")
                        .WithMany("LearnerSubjects")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Parent", b =>
                {
                    b.HasOne("Lisa.Models.Entities.Learner", "Learner")
                        .WithMany("Parents")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Period", b =>
                {
                    b.HasOne("Lisa.Models.Entities.SchoolGrade", "SchoolGrade")
                        .WithMany()
                        .HasForeignKey("SchoolGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("Periods")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lisa.Models.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Teacher", "Teacher")
                        .WithMany("Periods")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolGrade");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Lisa.Models.Entities.RegisterClass", b =>
                {
                    b.HasOne("Lisa.Models.Entities.SchoolGrade", "SchoolGrade")
                        .WithMany("RegisterClasses")
                        .HasForeignKey("SchoolGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.School", null)
                        .WithMany("RegisterClasses")
                        .HasForeignKey("SchoolId");

                    b.HasOne("Lisa.Models.Entities.Teacher", "Teacher")
                        .WithMany("RegisterClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SchoolGrade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Result", b =>
                {
                    b.HasOne("Lisa.Models.Entities.Learner", "Learner")
                        .WithMany("Results")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Lisa.Models.Entities.School", b =>
                {
                    b.HasOne("Lisa.Models.Entities.SchoolCurriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("SchoolCurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolGrade", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("SchoolGrades")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.SystemGrade", "SystemGrade")
                        .WithMany()
                        .HasForeignKey("SystemGradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SystemGrade");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Subject", b =>
                {
                    b.HasOne("Lisa.Models.Entities.Teacher", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Lisa.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Lisa.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Lisa.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterClassCompulsorySubject", b =>
                {
                    b.HasOne("Lisa.Models.Entities.RegisterClass", null)
                        .WithMany()
                        .HasForeignKey("RegisterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisa.Models.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lisa.Models.Entities.Administrator", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("Administrators")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("School");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Principal", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("Principals")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("School");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolManagement", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("SchoolManagements")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("School");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Teacher", b =>
                {
                    b.HasOne("Lisa.Models.Entities.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("School");
                });

            modelBuilder.Entity("Lisa.Models.Entities.CareGroup", b =>
                {
                    b.Navigation("CareGroupMembers");
                });

            modelBuilder.Entity("Lisa.Models.Entities.EmailCampaign", b =>
                {
                    b.Navigation("EmailRecipients");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Learner", b =>
                {
                    b.Navigation("EmailReceipts");

                    b.Navigation("LearnerSubjects");

                    b.Navigation("Parents");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Parent", b =>
                {
                    b.Navigation("EmailReceipts");
                });

            modelBuilder.Entity("Lisa.Models.Entities.RegisterClass", b =>
                {
                    b.Navigation("Learners");
                });

            modelBuilder.Entity("Lisa.Models.Entities.School", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("CareGroups");

                    b.Navigation("Learners");

                    b.Navigation("Periods");

                    b.Navigation("Principals");

                    b.Navigation("RegisterClasses");

                    b.Navigation("SchoolGrades");

                    b.Navigation("SchoolManagements");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Lisa.Models.Entities.SchoolGrade", b =>
                {
                    b.Navigation("Combinations");

                    b.Navigation("RegisterClasses");
                });

            modelBuilder.Entity("Lisa.Models.Entities.User", b =>
                {
                    b.Navigation("EmailReceipts");
                });

            modelBuilder.Entity("Lisa.Models.Entities.Teacher", b =>
                {
                    b.Navigation("CareGroups");

                    b.Navigation("Periods");

                    b.Navigation("RegisterClasses");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
