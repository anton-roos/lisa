@page "/assessment-types"
@using Lisa.Models.Entities
@inject AssessmentTypeService AssessmentTypeService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Assessment Types</PageTitle>

<MudButton Variant="Variant.Filled" 
           Color="Color.Primary" 
           StartIcon="@Icons.Material.Filled.Add"
           OnClick="CreateAssessmentType"
           Class="mb-3">
    Add Assessment Type
</MudButton>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
else if (!AssessmentTypes.Any())
{
    <MudAlert Severity="Severity.Info" Class="mt-3">
        No assessment types found, please add an Assessment Type.
    </MudAlert>
}
else
{
    <MudTable Items="@AssessmentTypes" 
              Hover="true" 
              Striped="true" 
              Dense="true"
              Elevation="2">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="type">
            <MudTd DataLabel="Name">@type.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Secondary" 
                               Size="Size.Small"
                               OnClick="@(() => EditAssessmentType(type.Id))"
                               Title="Edit" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error" 
                               Size="Size.Small"
                               OnClick="@(() => DeleteAssessmentType(type.Id))"
                               Title="Delete" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<AssessmentType> AssessmentTypes { get; set; } = [];
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentTypes();
    }

    private async Task LoadAssessmentTypes()
    {
        try
        {
            _loading = true;
            AssessmentTypes = await AssessmentTypeService.GetAssessmentTypesAsync();
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void EditAssessmentType(int id)
    {
        Navigation.NavigateTo($"/assessment-types/manage/{id}");
    }

    private void CreateAssessmentType()
    {
        Navigation.NavigateTo("/assessment-types/manage");
    }

    private async Task DeleteAssessmentType(int id)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete assessment type {id}?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                _loading = true;
                await InvokeAsync(StateHasChanged);
                await AssessmentTypeService.DeleteAssessmentTypeAsync(id);
                await LoadAssessmentTypes();
            }
            finally
            {
                _loading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
