@page "/care-groups"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject CareGroupService CareGroupService
@inject SchoolService SchoolService
@inherits EventAwareComponentBase

<PageTitle>Care Groups</PageTitle>
<AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to view care groups." />
        }
        else
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddCareGroup"
                       Class="mb-3">
                Add Care Group
            </MudButton>

            @if (_careGroups == null)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else if (!_careGroups.Any())
            {
                <MudAlert Severity="Severity.Info" Class="mt-3">
                    No Care Groups found for <strong>@_selectedSchool.ShortName</strong>.
                </MudAlert>
            }
            else
            {
                <MudTable Items="@_careGroups" 
                          Hover="true" 
                          Striped="true" 
                          Dense="true"
                          Elevation="2">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Teachers</MudTh>
                        <MudTh>Learner Count</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="careGroup">
                        <MudTd DataLabel="Name">@careGroup.Name</MudTd>
                        <MudTd DataLabel="Teachers">
                            @if (careGroup.Users != null && careGroup.Users.Any())
                            {
                                @string.Join(", ", careGroup.Users.Select(u => u.Abbreviation))
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">No Teacher</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Learner Count">@(careGroup.CareGroupMembers?.Count() ?? 0)</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                           Color="Color.Primary" 
                                           Size="Size.Small"
                                           OnClick="@(() => ViewCareGroup(careGroup))"
                                           Title="View" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                           Color="Color.Secondary" 
                                           Size="Size.Small"
                                           OnClick="@(() => EditCareGroup(careGroup))"
                                           Title="Edit" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteCareGroup(careGroup))"
                                           Title="Delete" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<CareGroup>? _careGroupsToFilter;
    private IEnumerable<CareGroup>? _careGroups;
    private School? _selectedSchool;

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        _careGroupsToFilter = await CareGroupService.GetAllAsync();
        _careGroups = _careGroupsToFilter.Where(c => c.SchoolId == _selectedSchool?.Id);
        SubscribeToEvent(UiEvents.SchoolSelected);
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                if (payload is School school)
                {
                    _selectedSchool = school;
                    if (_careGroupsToFilter != null)
                    {
                        _careGroups = _careGroupsToFilter.Where(c => c.SchoolId == _selectedSchool.Id);
                    }
                }

                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private void AddCareGroup()
    {
        Navigation.NavigateTo("/care-groups/manage");
    }

    private void EditCareGroup(CareGroup careGroup)
    {
        Navigation.NavigateTo($"/care-groups/manage/{careGroup.Id}");
    }

    private void ViewCareGroup(CareGroup careGroup)
    {
        Navigation.NavigateTo($"/care-groups/details/{careGroup.Id}");
    }

    private async Task DeleteCareGroup(CareGroup careGroup)
    {
        var careGroupEntity = await CareGroupService.GetByIdAsync(careGroup.Id);
        if (careGroupEntity != null)
        {
            await CareGroupService.DeleteAsync(careGroupEntity);
            _careGroupsToFilter = await CareGroupService.GetAllAsync();
            _careGroups = _careGroupsToFilter.Where(c => _selectedSchool != null 
                                                         && c.SchoolId == _selectedSchool.Id);
            await InvokeAsync(StateHasChanged);
        }
    }
}
