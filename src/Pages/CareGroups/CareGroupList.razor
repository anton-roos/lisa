@page "/care-groups"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject CareGroupService CareGroupService
@inject SchoolService SchoolService
@inherits EventAwareComponentBase

<PageTitle>Care Groups</PageTitle>
<AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        <MudText Typo="Typo.h3" Class="mb-4">Care Groups</MudText>

        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to to view care groups." />
        }
        else if (_careGroups == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else if (!_careGroups.Any())
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mb-3" OnClick="AddCareGroup">Add Care Group</MudButton>
            <MudAlert Severity="Severity.Info">
                No Care Groups for <strong>@_selectedSchool.ShortName</strong>.
            </MudAlert>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mb-3" OnClick="AddCareGroup">Add Care Group</MudButton>
            <MudGrid Spacing="3">
                @foreach (var careGroup in _careGroups)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="2">
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Class="mb-3">@careGroup.Name</MudText>
                                <MudStack Row="true" Spacing="1" Class="mb-3 flex-wrap">
                                    @if (careGroup.Users != null && careGroup.Users.Any())
                                    {
                                        @foreach (var user in careGroup.Users)
                                        {
                                            <MudChip T="string" Color="Color.Primary" Size="Size.Small">@user.Abbreviation</MudChip>
                                        }
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="Color.Error" Size="Size.Small">No Teacher</MudChip>
                                    }
                                </MudStack>
                                <MudText Typo="Typo.body2">Learner Count: @careGroup.CareGroupMembers?.Count().ToString()</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <ActionButtons TEntity="CareGroup" 
                                               Entity="careGroup"
                                               OnView="ViewCareGroup"
                                               OnEdit="EditCareGroup"
                                               OnDelete="DeleteCareGroup"/>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<CareGroup>? _careGroupsToFilter;
    private IEnumerable<CareGroup>? _careGroups;
    private School? _selectedSchool;

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        _careGroupsToFilter = await CareGroupService.GetAllAsync();
        _careGroups = _careGroupsToFilter.Where(c => c.SchoolId == _selectedSchool?.Id);
        SubscribeToEvent(UiEvents.SchoolSelected);
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                if (payload is School school)
                {
                    _selectedSchool = school;
                    if (_careGroupsToFilter != null)
                    {
                        _careGroups = _careGroupsToFilter.Where(c => c.SchoolId == _selectedSchool.Id);
                    }
                }

                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private void AddCareGroup()
    {
        Navigation.NavigateTo("/care-groups/manage");
    }

    private void EditCareGroup(CareGroup careGroup)
    {
        Navigation.NavigateTo($"/care-groups/manage/{careGroup.Id}");
    }

    private void ViewCareGroup(CareGroup careGroup)
    {
        Navigation.NavigateTo($"/care-groups/details/{careGroup.Id}");
    }

    private async Task DeleteCareGroup(CareGroup careGroup)
    {
        var careGroupEntity = await CareGroupService.GetByIdAsync(careGroup.Id);
        if (careGroupEntity != null)
        {
            await CareGroupService.DeleteAsync(careGroupEntity);
            _careGroupsToFilter = await CareGroupService.GetAllAsync();
            _careGroups = _careGroupsToFilter.Where(c => _selectedSchool != null 
                                                         && c.SchoolId == _selectedSchool.Id);
            await InvokeAsync(StateHasChanged);
        }
    }
}
