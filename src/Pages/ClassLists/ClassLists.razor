@page "/class-lists"
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject SchoolGradeService SchoolGradeService
@inject CombinationService CombinationService
@inject SubjectService SubjectService
@inject CareGroupService CareGroupService
@inject LearnerService LearnerService
@inject RegisterClassService RegisterClassService

@inherits EventAwareComponentBase

<PageTitle>Class Lists</PageTitle>
<AuthorizeView Context="_"
    Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.Teacher},{Roles.Administrator},{Roles.SchoolManagement}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to view Class Lists." />
        }
        else
        {
            <MudStack Spacing="3">
                <!-- View Mode Selection with MudChips -->
                <MudPaper Elevation="2" Class="pa-4">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h6">View Class List by:</MudText>
                        <MudChipSet T="string" 
                                   SelectedValue="_viewMode" 
                                   SelectedValueChanged="OnViewModeChanged"
                                   Filter="true" 
                                   Mandatory="true"
                                   SelectionMode="SelectionMode.SingleSelection">
                            <MudChip T="string" Value="@("Combination")" Color="Color.Primary" Icon="@Icons.Material.Filled.Class">Combination</MudChip>
                            <MudChip T="string" Value="@("RegisterClass")" Color="Color.Primary" Icon="@Icons.Material.Filled.Group">Register Class</MudChip>
                            <MudChip T="string" Value="@("CareGroup")" Color="Color.Primary" Icon="@Icons.Material.Filled.Diversity3">Care Group</MudChip>
                        </MudChipSet>
                    </MudStack>
                </MudPaper>

                <!-- Dynamic Filter Section -->
                <MudPaper Elevation="2">
                    <MudStack Spacing="3">
                        @if (_viewMode == "Combination")
                        {
                            <MudSelect T="Guid?" 
                                       Label="Select Grade"
                                       Value="_gradeId"
                                       ValueChanged="OnGradeChange"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Clearable="true"
                                       Style="width: 300px;"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@Icons.Material.Filled.School">
                                @foreach (var grade in _schoolGrades)
                                {
                                    <MudSelectItem T="Guid?" Value="@grade.Id">@grade.SystemGrade.Name</MudSelectItem>
                                }
                            </MudSelect>

                            @if (_gradeId != null)
                            {
                                <MudSelect T="string" 
                                           Label="Select Combination"
                                           Value="_combinationId"
                                           ValueChanged="OnCombinationChange"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.BottomCenter"
                                           Clearable="true"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Filled.Category">
                                    @foreach (var combination in _filteredCombinations)
                                    {
                                        <MudSelectItem T="string" Value="@combination.Id.ToString()">@combination.Name</MudSelectItem>
                                    }
                                    <MudSelectItem T="string" Value="@("Math")">Math</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("MathLit")">Math Literacy</MudSelectItem>
                                </MudSelect>
                            }

                            @if (!string.IsNullOrEmpty(_combinationId) && _combinationId != "Math" && _combinationId != "MathLit")
                            {
                                <MudSelect T="int?" 
                                           Label="Select Subject"
                                           Value="_subjectId"
                                           ValueChanged="OnSubjectChange"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.BottomCenter"
                                           Clearable="true"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Filled.MenuBook">
                                    @foreach (var subject in _combinationSubjects)
                                    {
                                        <MudSelectItem T="int?" Value="@subject.Id">@subject.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        }
                        else if (_viewMode == "RegisterClass")
                        {
                            <MudSelect T="Guid?" 
                                       Label="Select Grade"
                                       Value="_gradeId"
                                       ValueChanged="OnGradeChange"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Clearable="true"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@Icons.Material.Filled.School">
                                @foreach (var grade in _schoolGrades)
                                {
                                    <MudSelectItem T="Guid?" Value="@grade.Id">@grade.SystemGrade.Name</MudSelectItem>
                                }
                            </MudSelect>

                            @if (_gradeId != null)
                            {
                                <MudSelect T="Guid?" 
                                           Label="Select Register Class"
                                           Value="_registerClassId"
                                           ValueChanged="OnRegisterClassChange"
                                           Variant="Variant.Outlined"
                                           AnchorOrigin="Origin.BottomCenter"
                                           Clearable="true"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Filled.Group">
                                    @foreach (var regClass in _registerClasses)
                                    {
                                        <MudSelectItem T="Guid?" Value="@regClass.Id">@regClass.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        }
                        else if (_viewMode == "CareGroup")
                        {
                            <MudSelect T="Guid?" 
                                       Label="Select Care Group"
                                       Value="_careGroupId"
                                       ValueChanged="OnCareGroupChange"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Clearable="true"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@Icons.Material.Filled.Diversity3">
                                @foreach (var careGroup in _careGroups)
                                {
                                    <MudSelectItem T="Guid?" Value="@careGroup.Id">@careGroup.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudStack>
                </MudPaper>

                <!-- Learner List Display -->
                @if (_shouldShowLearners)
                {
                    <LearnerListComponent Learners="@_learners" Title="@_currentTitle" />
                }
            </MudStack>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthenticated />
    </NotAuthorized>
</AuthorizeView>

@code {
    private School? _selectedSchool;
    private string _viewMode = "Combination";

    private List<SchoolGrade> _schoolGrades = [];
    private Guid? _gradeId;

    private List<Combination> _combinations = [];
    private List<Combination> _filteredCombinations = [];
    private string? _combinationId;

    private List<Subject> _subjects = [];
    private int? _subjectId;
    private List<Subject> _combinationSubjects = [];

    private List<CareGroup> _careGroups = [];
    private Guid? _careGroupId;

    private List<RegisterClass> _registerClasses = [];
    private Guid? _registerClassId;

    private List<Learner> _learners = [];
    private string _currentTitle = string.Empty;

    private bool _shouldShowLearners => 
        (_viewMode == "Combination" && _subjectId != null) ||
        (_viewMode == "RegisterClass" && _registerClassId != null) ||
        (_viewMode == "CareGroup" && _careGroupId != null);

    protected override async Task OnInitializedAsync()
    {
        SubscribeToEvent(UiEvents.SchoolSelected);
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        await LoadFilters();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        if (eventName == UiEvents.SchoolSelected && payload is School school)
        {
            _selectedSchool = school;
            ClearFilters();
            await LoadFilters();
        }
        await base.HandleEventAsync(eventName, payload);
    }

    private void ClearFilters()
    {
        _gradeId = null;
        _combinationId = null;
        _subjectId = null;
        _careGroupId = null;
        _registerClassId = null;
        _learners.Clear();
        _filteredCombinations.Clear();
        _combinationSubjects.Clear();
        _registerClasses.Clear();
        _currentTitle = string.Empty;
    }

    private async Task LoadFilters()
    {
        if (_selectedSchool != null)
        {
            _schoolGrades = await SchoolGradeService.GetGradesForSchool(_selectedSchool.Id);
            _combinations = await CombinationService.GetCombinationsBySchoolId(_selectedSchool.Id);
            _subjects = await SubjectService.GetAllAsync();
            _careGroups = await CareGroupService.GetBySchoolAsync(_selectedSchool.Id);

            var validGradeIds = _combinations.Select(c => c.SchoolGradeId).Distinct().ToHashSet();
            _schoolGrades = _schoolGrades.Where(g => validGradeIds.Contains(g.Id)).ToList();
        }
    }

    private async Task OnViewModeChanged(string mode)
    {
        _viewMode = mode;
        ClearFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGradeChange(Guid? value)
    {
        _gradeId = value;
        _combinationId = null;
        _subjectId = null;
        _registerClassId = null;
        _learners.Clear();
        _currentTitle = string.Empty;

        if (_gradeId != null)
        {
            _filteredCombinations = _combinations.Where(c => c.SchoolGradeId == _gradeId).ToList();
            
            if (_viewMode == "RegisterClass")
            {
                var allRegisterClasses = await RegisterClassService.GetBySchoolIdAsync(_selectedSchool!.Id);
                _registerClasses = allRegisterClasses.Where(rc => rc.SchoolGradeId == _gradeId).ToList();
            }
        }
        else
        {
            _filteredCombinations.Clear();
            _registerClasses.Clear();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCombinationChange(string? value)
    {
        _combinationId = value;
        _subjectId = null;
        _learners.Clear();
        _currentTitle = string.Empty;

        if (!string.IsNullOrEmpty(value))
        {
            if (value == "Math" || value == "MathLit")
            {
                var subjectName = value == "Math" ? "Mathematics" : "Mathematical Literacy";
                var mathSubject = _subjects.FirstOrDefault(s => s.Name != null 
                                            && s.Name.Equals(subjectName, StringComparison.OrdinalIgnoreCase) 
                                            && s.SubjectType == SubjectType.MathCombination);
                if (mathSubject != null)
                {
                    _subjectId = mathSubject.Id;
                    await LoadLearners();
                }
                _combinationSubjects.Clear();
            }
            else if (Guid.TryParse(value, out var combId))
            {
                var selectedCombination = _combinations.FirstOrDefault(c => c.Id == combId);
                if (selectedCombination != null && selectedCombination.Subjects != null)
                {
                    _combinationSubjects = selectedCombination.Subjects.ToList();
                }
                else
                {
                    _combinationSubjects.Clear();
                }
            }
        }
        else
        {
            _combinationSubjects.Clear();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSubjectChange(int? value)
    {
        _subjectId = value;
        await LoadLearners();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCareGroupChange(Guid? value)
    {
        _careGroupId = value;
        await LoadLearners();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRegisterClassChange(Guid? value)
    {
        _registerClassId = value;
        await LoadLearners();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadLearners()
    {
        if (_selectedSchool == null)
            return;

        _learners.Clear();
        _currentTitle = string.Empty;

        if (_viewMode == "Combination")
        {
            if (_gradeId != null && !string.IsNullOrEmpty(_combinationId) && _subjectId != null)
            {
                var grade = _schoolGrades.FirstOrDefault(g => g.Id == _gradeId);
                string combinationName;
                string subjectName;
                
                if (_combinationId == "Math")
                {
                    combinationName = "Math";
                    subjectName = "Math";
                    _learners = await LearnerService.GetByGradeAndSubjectAsync(_gradeId.Value, _subjectId.Value);
                }
                else if (_combinationId == "MathLit")
                {
                    combinationName = "Math Literacy";
                    subjectName = "Math Literacy";
                    _learners = await LearnerService.GetByGradeAndSubjectAsync(_gradeId.Value, _subjectId.Value);
                }
                else if (Guid.TryParse(_combinationId, out var combId))
                {
                    var combination = _combinations.FirstOrDefault(c => c.Id == combId);
                    var subject = _combinationSubjects.FirstOrDefault(s => s.Id == _subjectId);
                    combinationName = combination?.Name ?? "";
                    subjectName = subject?.Name ?? "";
                    _learners = await LearnerService.GetByCombinationAndSubjectAsync(combId, _subjectId.Value);
                }
                else
                {
                    return;
                }
                
                _learners = _learners.OrderBy(l => l.Surname).ThenBy(l => l.Name).ToList();
                _currentTitle = $"{grade?.SystemGrade.Name} - {combinationName} - {subjectName}";
            }
        }
        else if (_viewMode == "RegisterClass")
        {
            if (_registerClassId != null)
            {
                _learners = await LearnerService.GetByRegisterClassAsync(_registerClassId.Value);
                _learners = _learners.OrderBy(l => l.Surname).ThenBy(l => l.Name).ToList();
                
                var registerClass = _registerClasses.FirstOrDefault(c => c.Id == _registerClassId);
                _currentTitle = registerClass?.Name ?? "";
            }
        }
        else if (_viewMode == "CareGroup")
        {
            if (_careGroupId != null)
            {
                _learners = await LearnerService.GetByCareGroupAsync(_careGroupId.Value);
                _learners = _learners.OrderBy(l => l.Surname).ThenBy(l => l.Name).ToList();
                
                var careGroup = _careGroups.FirstOrDefault(c => c.Id == _careGroupId);
                _currentTitle = careGroup?.Name ?? "";
            }
        }
    }
}
