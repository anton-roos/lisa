@page "/combinations"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject CombinationService CombinationService
@inject SchoolGradeService SchoolGradeService
@inherits EventAwareComponentBase
@inject SchoolService SchoolService
@inject IDialogService DialogService

<PageTitle>Subject Combinations</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
             <NoSchoolSelected Message=" Please select a school to view subject combinations." />
        }
        else if (_subjectCombinations == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }
        else if (_schoolGrades == null || !_schoolGrades.Any())
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddCombination"
                       Class="mb-3">
                Add Combination
            </MudButton>
            <MudAlert Severity="Severity.Warning" Class="mt-3">
                No Grades found. Please add a grade first before adding Subject combination.
            </MudAlert>
        }
        else if (!_subjectCombinations.Any())
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddCombination"
                       Class="mb-3">
                Add Combination
            </MudButton>
            <MudAlert Severity="Severity.Info" Class="mt-3">
                No Subject Combinations found.
            </MudAlert>
        }
        else
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddCombination"
                       Class="mb-3">
                Add Combination
            </MudButton>
            
            <MudTable Items="@_subjectCombinations" 
                      Hover="true" 
                      Striped="true" 
                      Dense="true"
                      Elevation="2"
                      Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Grade</MudTh>
                    <MudTh>Subjects</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate Context="combination">
                    <MudTd DataLabel="Name">
                        <MudText Typo="Typo.body1">@combination.Name</MudText>
                    </MudTd>
                    <MudTd DataLabel="Grade">
                        @if (combination.SchoolGrade?.SystemGrade != null)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                @combination.SchoolGrade.SystemGrade.Name
                            </MudChip>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">-</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Subjects">
                        @if (combination.Subjects != null && combination.Subjects.Any())
                        {
                            <MudStack Row="true" Spacing="1" Wrap="Wrap.Wrap">
                                @foreach (var subject in combination.Subjects)
                                {
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small">@subject.Code</MudChip>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">No subjects</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudStack Row="true" Spacing="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                           Color="Color.Primary" 
                                           Size="Size.Small"
                                           OnClick="@(() => ViewCombination(combination))"
                                           Title="View" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                           Color="Color.Secondary" 
                                           Size="Size.Small"
                                           OnClick="@(() => EditCombination(combination))"
                                           Title="Edit" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteCombination(combination))"
                                           Title="Delete" />
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Combination>? _subjectCombinations;
    private IEnumerable<SchoolGrade>? _schoolGrades;
    private School? _selectedSchool;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadCombinations();
    }

    private async Task LoadCombinations()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        if (_selectedSchool != null)
        {
            _schoolGrades = await SchoolGradeService.GetGradesForSchool(_selectedSchool.Id);
            _subjectCombinations = await CombinationService.GetSubjectCombinationsForSchool(_selectedSchool);
        }
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                _selectedSchool = payload as School;
                await LoadCombinations();
                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private void AddCombination()
    {
        Navigation.NavigateTo("/combinations/add");
    }

    private void ViewCombination(Combination combination)
    {
        Navigation.NavigateTo($"/combinations/details/{combination.Id}");
    }

    private void EditCombination(Combination combination)
    {
        Navigation.NavigateTo($"/combinations/edit/{combination.Id}");
    }

    private async Task DeleteCombination(Combination combination)
    {
        var combinationEntity = await CombinationService.GetByIdAsync(combination.Id);
        if (combinationEntity != null)
        {
            await CombinationService.DeleteAsync(combinationEntity.Id);
            await LoadCombinations();
            await InvokeAsync(StateHasChanged);
        }
    }
}
