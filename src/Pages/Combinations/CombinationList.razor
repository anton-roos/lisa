@page "/combinations"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject CombinationService CombinationService
@inject SchoolGradeService SchoolGradeService
@inherits EventAwareComponentBase
@inject SchoolService SchoolService

<PageTitle>Subject Combinations</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        <h3>Subject Combinations</h3>
        @if (_selectedSchool == null)
        {
             <NoSchoolSelected Message=" Please select a school to view subject combinations." />
        }
        else if (_subjectCombinations == null)
        {
            <p>Loading...</p>
        }
        else if (_schoolGrades == null || !_schoolGrades.Any())
        {
            <button class="btn btn-primary mb-3" @onclick="AddCombination">Add Combination</button>
            <div class="alert alert-warning">
                No Grades found. Please add a grade first before adding Subject combination.
            </div>
        }
        else if (!_subjectCombinations.Any())
        {
            <button class="btn btn-primary mb-3" @onclick="AddCombination">Add Combination</button>
            <div class="alert alert-info">
                No Subject Combinations found.
            </div>
        }
        else
        {
            <button class="btn btn-primary mb-3" @onclick="AddCombination">Add Combination</button>
            <div>
                <div class="row">
                    @foreach (var combination in _subjectCombinations)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card shadow-sm mb-4">
                                <div class="card-body">
                                    <h5 class="card-title fw-bold">@combination.Name</h5>
                                    <p class="mb-2"><strong>Grade:</strong>
                                        @combination.SchoolGrade?.SystemGrade.Name</p>

                                    <div class="mb-3">
                                        <strong>Subjects:</strong>
                                        <div class="mt-1">
                                            @if (combination.Subjects != null)
                                            {
                                                foreach (var subject in combination.Subjects)
                                                {
                                                    <Pill Color="danger" AdditionalClasses="me-1">@subject.Code</Pill>
                                                }
                                            }
                                        </div>
                                    </div>

                                    <ActionButtons TEntity="Combination" Entity="combination" OnView="ViewCombination"
                                        OnEdit="EditCombination" OnDelete="DeleteCombination" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Combination>? _subjectCombinations;
    private IEnumerable<SchoolGrade>? _schoolGrades;
    private School? _selectedSchool;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadCombinations();
    }

    private async Task LoadCombinations()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        if (_selectedSchool != null)
        {
            _schoolGrades = await SchoolGradeService.GetGradesForSchool(_selectedSchool.Id);
            _subjectCombinations = await CombinationService.GetSubjectCombinationsForSchool(_selectedSchool);
        }
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                _selectedSchool = payload as School;
                await LoadCombinations();
                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private void AddCombination()
    {
        Navigation.NavigateTo("/combinations/add");
    }

    private void ViewCombination(Combination combination)
    {
        Navigation.NavigateTo($"/combinations/details/{combination.Id}");
    }

    private void EditCombination(Combination combination)
    {
        Navigation.NavigateTo($"/combinations/edit/{combination.Id}");
    }

    private async Task DeleteCombination(Combination combination)
    {
        var combinationEntity = await CombinationService.GetByIdAsync(combination.Id);
        if (combinationEntity != null)
        {
            await CombinationService.DeleteAsync(combinationEntity.Id);
            await LoadCombinations();
            await InvokeAsync(StateHasChanged);
        }
    }
}
