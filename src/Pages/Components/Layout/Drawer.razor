@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager Nav

<MudDrawer @bind-Open="Open"
           Variant="Variant"
           Anchor="Anchor.Left"
           Elevation="0"
           Class="pa-2"
           Width="@Width"
           DisableOverlay="@DisableOverlay">

    <MudNavMenu Dense="true">
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>

        <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Teacher},{Roles.Principal},{Roles.Administrator},{Roles.Reception}")">
            <Authorized>
                <MudNavGroup Title="Attendance" Icon="@Icons.Material.Filled.HowToReg" Expanded="false">
                    <AuthorizeView Roles="@Roles.SystemAdministrator" Context="signInOutAuth">
                        <Authorized>
                            <MudNavLink Href="/sign-in-and-out" Icon="@Icons.Material.Filled.HowToReg">Sign In / Out</MudNavLink>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Teacher}")" Context="dailyRegisterAuth">
                        <Authorized>
                            <MudNavLink Href="/daily-register" Icon="@Icons.Material.Filled.EventAvailable">Daily Attendance</MudNavLink>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.Administrator},{Roles.Teacher}")" Context="perPeriodAuth">
                        <Authorized>
                            <MudNavLink Href="/per-period-attendance" Icon="@Icons.Material.Filled.Schedule">Per Period Attendance</MudNavLink>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.Reception}")" Context="leaveEarlyAuth">
                        <Authorized>
                            <MudNavLink Href="/leave-early" Icon="@Icons.Material.Filled.ExitToApp">Leave Early</MudNavLink>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement},{Roles.Administrator},{Roles.Teacher}")" Context="adiAuth">
                        <Authorized>
                            <MudNavLink Href="/adi-creator" Icon="@Icons.Material.Filled.AddCircle">ADI Creator</MudNavLink>
                        </Authorized>
                    </AuthorizeView>
                </MudNavGroup>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement},{Roles.Administrator},{Roles.Teacher}")">
            <Authorized>
                <MudNavLink Href="/class-lists" Icon="@Icons.Material.Filled.ListAlt">Class Lists</MudNavLink>
                <MudNavLink Href="/results/manage" Icon="@Icons.Material.Filled.EditNote">Capture Results</MudNavLink>
                <MudNavLink Href="/results" Icon="@Icons.Material.Filled.Assessment">Results</MudNavLink>
                <MudNavLink Href="/progress-feedback" Icon="@Icons.Material.Filled.GetApp">Progress Feedback</MudNavLink>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement}.{Roles.Teacher}")">
            <Authorized>
                <MudNavLink Href="/academic-planning" Icon="@Icons.Material.Filled.ChromeReaderMode">Academic Planning</MudNavLink>
            </Authorized>
        </AuthorizeView>
        
        <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement}")">
            <Authorized>
                <MudNavLink Href="/communication" Icon="@Icons.Material.Filled.Campaign">Communication</MudNavLink>
                <MudNavLink Href="/email-campaigns" Icon="@Icons.Material.Filled.MarkEmailRead">Email Campaigns</MudNavLink>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="@Roles.SystemAdministrator">
            <Authorized>
                <MudNavGroup Title="System Settings" Icon="@Icons.Material.Filled.Settings" Expanded="false">
                    <MudNavLink Href="/schools" Icon="@Icons.Material.Filled.School">Schools</MudNavLink>
                    <MudNavLink Href="/subjects" Icon="@Icons.Material.Filled.MenuBook">Subjects</MudNavLink>
                    <MudNavLink Href="/assessment-types" Icon="@Icons.Material.Filled.Rule">Assessment Types</MudNavLink>
                    <MudNavLink Href="/school-year" Icon="@Icons.Material.Filled.CalendarMonth">School Year</MudNavLink>
                </MudNavGroup>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
            <Authorized>
                <MudNavGroup Title="School Settings" Icon="@Icons.Material.Filled.SettingsApplications" Expanded="false">
                    <MudNavLink Href="/care-groups" Icon="@Icons.Material.Filled.VolunteerActivism">Care Groups</MudNavLink>
                    <MudNavLink Href="/grades" Icon="@Icons.Material.Filled.AutoStories">Grades</MudNavLink>
                    <MudNavLink Href="/register-class" Icon="@Icons.Material.Filled.PeopleAlt">Register Class</MudNavLink>
                    <MudNavLink Href="/combinations" Icon="@Icons.Material.Filled.Category">Combinations</MudNavLink>
                    <MudNavLink Href="/learners" Icon="@Icons.Material.Filled.School">Learners</MudNavLink>
                    <MudNavLink Href="/users" Icon="@Icons.Material.Filled.Badge">Staff</MudNavLink>
                </MudNavGroup>
            </Authorized>
        </AuthorizeView>

    </MudNavMenu>
</MudDrawer>

@code {
    // --- Parameters so MainLayout can control the drawer ---
    [Parameter] public bool Open { get; set; } = true;
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }
    [Parameter] public DrawerVariant Variant { get; set; } = DrawerVariant.Responsive;
    [Parameter] public bool DisableOverlay { get; set; } = false;
    [Parameter] public string Width { get; set; } = "260px";

    protected override void OnInitialized()
    {
        // Close the drawer when navigation happens (nice on mobile/temporary variants)
        Nav.LocationChanged += HandleLocationChanged;
    }

    private async void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (Variant != DrawerVariant.Persistent && Open)
        {
            Open = false;
            await OpenChanged.InvokeAsync(Open);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
    }
}
