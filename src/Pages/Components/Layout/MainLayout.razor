@inherits LayoutComponentBase
@using MudBlazor
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Anti
@inject IHttpContextAccessor Http

<MudThemeProvider Theme="@_theme" IsDarkMode="@_darkMode" />
<MudCssBaseline />

<MudLayout>

    <!-- Top App Bar, colored by theme -->
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h6">LISA</MudText>
        <MudSpacer />

        <!-- Dark / Light toggle -->
        <MudIconButton Icon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="@ToggleDark"
                       Color="Color.Inherit"
                       AriaLabel="Toggle theme" />

        <AuthorizeView Roles="@Roles.SystemAdministrator">
            <SelectSchool />
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <form action="/logout" method="post" class="m-0">
                    @if (_afToken is not null)
                    {
                        <input type="hidden" name="@_afField" value="@_afToken" />
                        <input type="hidden" name="returnUrl" value="/" />
                    }
                    <MudButton Type="ButtonType.Submit"
                               Variant="Variant.Outlined"
                               Color="Color.Error"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.Logout">
                        Logout
                    </MudButton>
                </form>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/login"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Login">
                    Login
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

   <Drawer Open="@_drawerOpen"
           OpenChanged="@(v => _drawerOpen = v)"
           Variant="DrawerVariant.Responsive"
           Width="260px" />

    <MudMainContent>
        <CustomErrorBoundary>
            <ChildContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-4">
                    @Body
                </MudContainer>
            </ChildContent>
            <ErrorContent />
        </CustomErrorBoundary>
    </MudMainContent>

</MudLayout>

<MudSnackbarProvider />

@code {
    private bool _drawerOpen = true;
    private bool _darkMode = false;

    private string _afField = "__RequestVerificationToken";
    private string? _afToken;

    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#4E246C",
            PrimaryContrastText = "#ffffff",
            Secondary = "#783CA3",
            Info = "#6D28D9",
            Success = "#16A34A",
            Warning = "#F59E0B",
            Error = "#DC2626",

            Background = "#F7F7FB",
            Surface = "#FFFFFF",
            DrawerBackground = "#FAF7FF",
            DrawerText = "#2B2B2B",
            AppbarBackground = "#4E246C",
            AppbarText = "#FFFFFF",
            ActionDefault = "#4E246C",
            ActionDisabled = "#C2C2C2",
            ActionDisabledBackground = "#EAEAEA"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#4E246C",
            Secondary = "#783CA3",
            Background = "#121016",
            Surface = "#1B1722",
            DrawerBackground = "#16131C",
            DrawerText = "#EAE6F2",
            AppbarBackground = "#1B1722",
            AppbarText = "#FFFFFF",
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "10px"
        },
        Typography = new Typography
        {
            Default = { FontFamily = new[] { "Inter", "system-ui", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "sans-serif" } },
            H1 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            H2 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            H3 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            Button = { FontFamily = new[] { "Inter", "sans-serif" }, TextTransform = "none", LetterSpacing = ".02em" }
        }
    };

    protected override void OnInitialized()
    {
        if (Http.HttpContext is { } ctx)
        {
            var t = Anti.GetAndStoreTokens(ctx);
            _afField = t.FormFieldName;
            _afToken = t.RequestToken;
        }
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    private void ToggleDark() => _darkMode = !_darkMode;
}
