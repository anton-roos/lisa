@inherits LayoutComponentBase
@implements IDisposable
@using MudBlazor
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Anti
@inject IHttpContextAccessor Http

<MudThemeProvider Theme="@_theme" IsDarkMode="@_darkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudCssBaseline />

<MudLayout>

    <!-- Top App Bar, colored by theme -->
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h6">LISA</MudText>
        
        @if (_breadcrumbItems.Count > 1)
        {
            <MudBreadcrumbs Items="_breadcrumbItems" Style="color: white; padding: 0; margin: 0">
                <ItemTemplate Context="item">
                   <MudText Typo="Typo.h6" Color="Color.Inherit">@item.Text</MudText>
                </ItemTemplate>
                <SeparatorTemplate>
                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Size="Size.Small" Style="color: white;" />
                </SeparatorTemplate>
            </MudBreadcrumbs>
        }
        
        <MudSpacer />

        <!-- Dark / Light toggle -->
        <MudIconButton Icon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="@ToggleDark"
                       Color="Color.Inherit"
                       AriaLabel="Toggle theme" />

        <AuthorizeView Roles="@Roles.SystemAdministrator">
            <SelectSchool />
        </AuthorizeView>

        <AuthorizeView>
            <Authorized>
                <MudButton OnClick="@Logout"
                           Variant="Variant.Outlined"
                           Color="Color.Error"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Logout">
                    Logout
                </MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/login"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Login">
                    Login
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

   <Drawer Open="@_drawerOpen"
           OpenChanged="@(v => _drawerOpen = v)"
           Variant="DrawerVariant.Responsive"
           Width="260px" />

    <MudMainContent>
        <CustomErrorBoundary>
            <ChildContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-4">
                    @Body
                </MudContainer>
            </ChildContent>
            <ErrorContent />
        </CustomErrorBoundary>
    </MudMainContent>

</MudLayout>

<MudSnackbarProvider />

@code {
    private bool _drawerOpen = true;
    private bool _darkMode = false;
    private List<BreadcrumbItem> _breadcrumbItems = new();

    private string _afField = "__RequestVerificationToken";
    private string? _afToken;

    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#4E246C",
            PrimaryContrastText = "#ffffff",
            Secondary = "#783CA3",
            Info = "#6D28D9",
            Success = "#16A34A",
            Warning = "#F59E0B",
            Error = "#DC2626",

            Background = "#F7F7FB",
            Surface = "#FFFFFF",
            DrawerBackground = "#FAF7FF",
            DrawerText = "#2B2B2B",
            AppbarBackground = "#4E246C",
            AppbarText = "#FFFFFF",
            ActionDefault = "#4E246C",
            ActionDisabled = "#C2C2C2",
            ActionDisabledBackground = "#EAEAEA"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#4E246C",
            Secondary = "#783CA3",
            Background = "#121016",
            Surface = "#1B1722",
            DrawerBackground = "#16131C",
            DrawerText = "#EAE6F2",
            AppbarBackground = "#1B1722",
            AppbarText = "#FFFFFF",
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "10px"
        },
        Typography = new Typography
        {
            Default = { FontFamily = new[] { "Inter", "system-ui", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "sans-serif" } },
            H1 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            H2 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            H3 = { FontFamily = new[] { "Inter", "sans-serif" }, FontWeight = "600" },
            Button = { FontFamily = new[] { "Inter", "sans-serif" }, TextTransform = "none", LetterSpacing = ".02em" }
        }
    };

    protected override void OnInitialized()
    {
        if (Http.HttpContext is { } ctx)
        {
            var t = Anti.GetAndStoreTokens(ctx);
            _afField = t.FormFieldName;
            _afToken = t.RequestToken;
        }

        GenerateBreadcrumbs();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        GenerateBreadcrumbs();
        InvokeAsync(StateHasChanged);
    }

    private void GenerateBreadcrumbs()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var path = uri.AbsolutePath.TrimStart('/');

        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(string.Empty, href: "/", icon: Icons.Material.Filled.Home)
        };

        if (string.IsNullOrEmpty(path))
        {
            return;
        }

        var segments = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var currentPath = "";

        for (int i = 0; i < segments.Length; i++)
        {
            currentPath += "/" + segments[i];
            var isLast = i == segments.Length - 1;
            var displayName = GetDisplayName(segments[i]);

            _breadcrumbItems.Add(new BreadcrumbItem(
                displayName,
                href: isLast ? null : currentPath,
                disabled: isLast
            ));
        }
    }

    private string GetDisplayName(string segment)
    {
        // Convert kebab-case and handle special cases
        return segment switch
        {
            "schools" => "Schools",
            "care-groups" => "Care Groups",
            "register-class" => "Register Class",
            "subjects" => "Subjects",
            "assessment-types" => "Assessment Types",
            "users" => "Staff",
            "grades" => "Grades",
            "learners" => "Learners",
            "class-lists" => "Class Lists",
            "results" => "Results",
            "daily-register" => "Daily Attendance",
            "per-period-attendance" => "Per Period Attendance",
            "leave-early" => "Leave Early",
            "combinations" => "Combinations",
            "communication" => "Communication",
            "email-campaigns" => "Email Campaigns",
            "adi-creator" => "ADI Creator",
            "progress-feedback" => "Progress Feedback",
            "sign-in-and-out" => "Sign In / Out",
            "add" => "Add",
            "edit" => "Edit",
            "details" => "Details",
            "manage" => "Manage",
            _ => FormatSegment(segment)
        };
    }

    private string FormatSegment(string segment)
    {
        // Check if it's a GUID or number (typically an ID)
        if (Guid.TryParse(segment, out _) || int.TryParse(segment, out _))
        {
            return "Details";
        }

        // Convert kebab-case or PascalCase to Title Case
        var words = System.Text.RegularExpressions.Regex.Replace(segment, "([a-z])([A-Z])", "$1 $2");
        words = words.Replace("-", " ").Replace("_", " ");
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(words.ToLower());
    }

    private void Logout()
    {
        // Force a full page navigation to the logout page
        // This breaks out of the Blazor SignalR connection and performs a proper HTTP GET
        NavigationManager.NavigateTo("/logout", forceLoad: true);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    private void ToggleDark() => _darkMode = !_darkMode;
}
