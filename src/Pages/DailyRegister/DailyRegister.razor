@page "/daily-register"
@using Lisa.Models.Entities
@using System.Security.Claims
@using Lisa.Enums
@using MudBlazor
@inject SchoolService SchoolService
@inject RegisterClassService RegisterClassService
@inject AuthenticationStateProvider AuthStateProvider
@inject LearnerService LearnerService
@inject AttendanceService AttendanceService
@inject AttendanceRecordService AttendanceRecordService
@inject NavigationManager NavigationManager
@inject ILogger<DailyRegister> Logger
@inject ISnackbar Snackbar
@inherits EventAwareComponentBase

<PageTitle>Daily Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Daily Register - @DateTime.UtcNow.Date.ToString("d MMM yyyy")</MudText>

    @if (_selectedSchool == null)
    {
        <NoSchoolSelected Message="Please select a school from the dropdown at the top of the page before proceeding." />
    }
    else
    {
        <MudPaper Class="pa-4 mb-4">
            <MudSelect T="Guid" 
                       Label="Select Register Class" 
                       @bind-Value="SelectedRegisterClassId"
                       Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="Guid" Value="Guid.Empty">-- Select Register Class --</MudSelectItem>
            </MudSelect>
        </MudPaper>

        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto d-block my-5" />
        }
        else if (SelectedRegisterClassId != Guid.Empty)
        {
            @if (_todayAttendanceSession == null)
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4">
                    <strong>No attendance session found for today.</strong><br />
                    Attendance must be started from the Sign In/Out page before the daily register can be used.
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Primary" 
                               Size="Size.Small" 
                               StartIcon="@Icons.Material.Filled.ArrowForward"
                               OnClick="NavigateToSignInOut"
                               Class="mt-2">
                        Go to Sign In/Out
                    </MudButton>
                </MudAlert>
            }
            else
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                @(_selectedRegisterClass?.Name)
                                @if (_selectedRegisterClass?.SchoolGrade?.SystemGrade != null)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Class="ml-2">
                                        @_selectedRegisterClass.SchoolGrade.SystemGrade.Name
                                    </MudChip>
                                }
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                           Color="Color.Primary" 
                                           OnClick="RefreshAttendance"
                                           aria-label="Refresh" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="_searchTerm" 
                                      Label="Search Learner" 
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Class="mb-4" />

                        @if (!_learners.Any())
                        {
                            <MudAlert Severity="Severity.Info">No learners found in this register class.</MudAlert>
                        }
                        else
                        {
                            <MudTable Items="@FilteredSignedInLearners" 
                                      Hover="true" 
                                      Dense="true"
                                      Striped="true">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Attendance</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Name">@context.Surname @context.Name</MudTd>
                                    <MudTd DataLabel="Attendance">
                                        @{
                                            var isDailyRegisterPresent = _dailyAttendanceData.TryGetValue(context.Id, out var dailyAttendance) && 
                                                                          dailyAttendance.Notes?.Contains("Present") == true;
                                            var isProcessing = _processingLearnerIds.Contains(context.Id);
                                        }
                                        <MudChip T="string"
                                                 Color="@(isDailyRegisterPresent ? Color.Success : Color.Warning)"
                                                 Disabled="@isProcessing"
                                                 OnClick="@(() => ToggleAttendance(context))"
                                                 Style="cursor: pointer; min-width: 100px;">
                                            @if (isProcessing)
                                            {
                                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                                <span>Saving...</span>
                                            }
                                            else
                                            {
                                                @(isDailyRegisterPresent ? "Present" : "Absent")
                                            }
                                        </MudChip>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>

                            @if (FilteredNotSignedInLearners.Any())
                            {
                                <MudText Typo="Typo.h6" Class="mt-6 mb-3" Color="Color.Secondary">
                                    Not at School (Did not sign in)
                                </MudText>
                                <MudTable Items="@FilteredNotSignedInLearners" 
                                          Hover="true" 
                                          Dense="true"
                                          Striped="true"
                                          Class="opacity-75">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Attendance</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name">@context.Surname @context.Name</MudTd>
                                        <MudTd DataLabel="Attendance">
                                            @{
                                                var isProcessing = _processingLearnerIds.Contains(context.Id);
                                            }
                                            <MudChip T="string"
                                                     Color="Color.Default"
                                                     Variant="Variant.Outlined"
                                                     Disabled="@isProcessing"
                                                     OnClick="@(() => CheckInFromRegister(context))"
                                                     Style="cursor: pointer; min-width: 100px;">
                                                @if (isProcessing)
                                                {
                                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                                    <span>Checking In...</span>
                                                }
                                                else
                                                {
                                                    <span>Not Present</span>
                                                }
                                            </MudChip>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                        }
                    </MudCardContent>
                </MudCard>
            }
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                Please select a register class to view the daily register.
            </MudAlert>
        }
    }
</MudContainer>

@code {
    private School? _selectedSchool;
    private List<RegisterClass> _registerClasses = [];
    private RegisterClass? _selectedRegisterClass;
    private List<Learner> _learners = [];
    private string _searchTerm = "";
    private bool IsLoading { get; set; }
    private Guid _selectedRegisterClassId = Guid.Empty;
    private Guid? _currentUserId;
    private Attendance? _todayAttendanceSession;
    private Dictionary<Guid, AttendanceRecord> _attendanceData = new();
    private Dictionary<Guid, AttendanceRecord> _dailyAttendanceData = new();
    private HashSet<Guid> _processingLearnerIds = [];

    private Guid SelectedRegisterClassId
    {
        get => _selectedRegisterClassId;
        set
        {
            if (_selectedRegisterClassId != value)
            {
                _selectedRegisterClassId = value;
                _ = OnRegisterClassChanged(value);
            }
        }
    }

    private IEnumerable<Learner> FilteredSignedInLearners => _learners
        .Where(l => _attendanceData.ContainsKey(l.Id))
        .Where(l => string.IsNullOrEmpty(_searchTerm) ||
            $"{l.Name} {l.Surname}".Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(l => l.Surname)
        .ThenBy(l => l.Name);

    private IEnumerable<Learner> FilteredNotSignedInLearners => _learners
        .Where(l => !_attendanceData.ContainsKey(l.Id))
        .Where(l => string.IsNullOrEmpty(_searchTerm) ||
            $"{l.Name} {l.Surname}".Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(l => l.Surname)
        .ThenBy(l => l.Name);

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                _currentUserId = Guid.Parse(userId);
            }
        }

        if (_selectedSchool != null)
        {
            await LoadRegisterClasses();
        }
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        if (eventName == UiEvents.SchoolSelected && payload is School school)
        {
            _selectedSchool = school;
            await LoadRegisterClasses();

            _selectedRegisterClassId = Guid.Empty;
            _selectedRegisterClass = null;
            _learners.Clear();
            _attendanceData.Clear();
            _dailyAttendanceData.Clear();
            _todayAttendanceSession = null;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadRegisterClasses()
    {
        if (_selectedSchool == null) return;

        try
        {
            IsLoading = true;
            _registerClasses = await RegisterClassService.GetBySchoolIdAsync(_selectedSchool.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading register classes");
            Snackbar.Add("Error loading register classes", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnRegisterClassChanged(Guid registerClassId)
    {
        if (registerClassId == Guid.Empty)
        {
            _learners.Clear();
            _attendanceData.Clear();
            _dailyAttendanceData.Clear();
            _selectedRegisterClass = null;
            _todayAttendanceSession = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

        await LoadLearners(registerClassId);
    }

    private async Task LoadLearners(Guid registerClassId)
    {
        if (_selectedSchool == null) return;

        try
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            _selectedRegisterClass = _registerClasses.FirstOrDefault(rc => rc.Id == registerClassId);
            _learners = await LearnerService.GetByRegisterClassAsync(registerClassId);

            var todayAttendance = await AttendanceService.GetTodaysAttendance(_selectedSchool.Id);
            if (todayAttendance != null)
            {
                var activeAttendance = await AttendanceService.GetTodaysAttendanceAsync(_selectedSchool.Id);
                _todayAttendanceSession = activeAttendance ?? todayAttendance;
            }

            _attendanceData.Clear();
            _dailyAttendanceData.Clear();

            if (_todayAttendanceSession?.AttendanceRecords != null)
            {
                foreach (var record in _todayAttendanceSession.AttendanceRecords)
                {
                    if ((record.AttendanceType == AttendanceType.CheckIn || record.AttendanceType == AttendanceType.CheckInFromRegister) && record.Start.HasValue)
                    {
                        var learner = _learners.FirstOrDefault(l => l.Id == record.LearnerId);
                        if (learner != null)
                        {
                            _attendanceData[learner.Id] = record;
                        }
                    }
                    else if (record.AttendanceType == AttendanceType.Register && record.Start.HasValue)
                    {
                        var learner = _learners.FirstOrDefault(l => l.Id == record.LearnerId);
                        if (learner != null)
                        {
                            _dailyAttendanceData[learner.Id] = record;
                        }
                    }
                }
            }

            Logger.LogInformation("Loaded {LearnerCount} learners for register class {RegisterClassId}. {SignedInCount} signed in today.", 
                _learners.Count, registerClassId, _attendanceData.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading learners for register class {RegisterClassId}", registerClassId);
            Snackbar.Add("Error loading learners", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ToggleAttendance(Learner learner)
    {
        if (_selectedSchool == null || _selectedRegisterClass == null || _todayAttendanceSession == null) return;
        if (_processingLearnerIds.Contains(learner.Id)) return;
        
        if (!_attendanceData.ContainsKey(learner.Id))
        {
            Logger.LogWarning("Cannot toggle attendance for learner {LearnerId} who did not sign in today", learner.Id);
            Snackbar.Add("Cannot toggle attendance for learner who did not sign in", Severity.Warning);
            return;
        }

        try
        {
            _processingLearnerIds.Add(learner.Id);
            await InvokeAsync(StateHasChanged);

            var isCurrentlyPresent = _dailyAttendanceData.TryGetValue(learner.Id, out var existingDailyAttendance) &&
                                     existingDailyAttendance.Notes?.Contains("Present") == true;

            var newAttendanceStatus = !isCurrentlyPresent;

            var dailyAttendanceRecord = new AttendanceRecord
            {
                Id = existingDailyAttendance?.Id ?? Guid.NewGuid(),
                LearnerId = learner.Id,
                AttendanceId = _todayAttendanceSession.Id,
                AttendanceType = AttendanceType.Register,
                Start = DateTime.UtcNow,
                Notes = newAttendanceStatus ? "Present" : "Absent",
                CreatedAt = existingDailyAttendance?.CreatedAt ?? DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                CreatedBy = existingDailyAttendance?.CreatedBy ?? _currentUserId,
                UpdatedBy = _currentUserId
            };

            if (existingDailyAttendance == null)
            {
                await AttendanceRecordService.CreateAsync(dailyAttendanceRecord);
            }
            else
            {
                await AttendanceRecordService.UpdateAsync(dailyAttendanceRecord);
            }

            _dailyAttendanceData[learner.Id] = dailyAttendanceRecord;

            Snackbar.Add($"{learner.Name} {learner.Surname} marked as {(newAttendanceStatus ? "Present" : "Absent")}", 
                newAttendanceStatus ? Severity.Success : Severity.Warning);

            Logger.LogInformation("Daily register attendance for learner {LearnerId} updated to {Status}",
                learner.Id, newAttendanceStatus ? "Present" : "Absent");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling daily register attendance for learner {LearnerId}", learner.Id);
            Snackbar.Add("Error updating attendance", Severity.Error);
        }
        finally
        {
            _processingLearnerIds.Remove(learner.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CheckInFromRegister(Learner learner)
    {
        if (_selectedSchool == null || _selectedRegisterClass == null || _todayAttendanceSession == null) return;
        if (_processingLearnerIds.Contains(learner.Id)) return;
        
        if (_attendanceData.ContainsKey(learner.Id))
        {
            Logger.LogWarning("Learner {LearnerId} has already signed in today", learner.Id);
            Snackbar.Add("Learner has already signed in", Severity.Warning);
            return;
        }

        try
        {
            _processingLearnerIds.Add(learner.Id);
            await InvokeAsync(StateHasChanged);

            var checkInFromRegisterRecord = new AttendanceRecord
            {
                Id = Guid.NewGuid(),
                LearnerId = learner.Id,
                AttendanceId = _todayAttendanceSession.Id,
                AttendanceType = AttendanceType.CheckInFromRegister,
                Start = DateTime.UtcNow,
                Notes = "Checked in via register class",
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                CreatedBy = _currentUserId,
                UpdatedBy = _currentUserId
            };

            await AttendanceRecordService.CreateAsync(checkInFromRegisterRecord);
            _attendanceData[learner.Id] = checkInFromRegisterRecord;

            var dailyAttendanceRecord = new AttendanceRecord
            {
                Id = Guid.NewGuid(),
                LearnerId = learner.Id,
                AttendanceId = _todayAttendanceSession.Id,
                AttendanceType = AttendanceType.Register,
                Start = DateTime.UtcNow,
                Notes = "Present",
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                CreatedBy = _currentUserId,
                UpdatedBy = _currentUserId
            };

            await AttendanceRecordService.CreateAsync(dailyAttendanceRecord);
            _dailyAttendanceData[learner.Id] = dailyAttendanceRecord;

            Snackbar.Add($"{learner.Name} {learner.Surname} checked in successfully", Severity.Success);
            Logger.LogInformation("Learner {LearnerId} checked in via register class", learner.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking in learner {LearnerId} from register", learner.Id);
            Snackbar.Add("Error checking in learner", Severity.Error);
        }
        finally
        {
            _processingLearnerIds.Remove(learner.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RefreshAttendance()
    {
        if (_selectedRegisterClassId != Guid.Empty)
        {
            await LoadLearners(_selectedRegisterClassId);
            Snackbar.Add("Attendance refreshed", Severity.Success);
        }
    }

    private void NavigateToSignInOut()
    {
        NavigationManager.NavigateTo("/sign-in-and-out");
    }
}
