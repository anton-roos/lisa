@page "/email-campaign/{Id:guid}"
@using Lisa.Models.Entities
@inject EmailCampaignService EmailCampaignService
@inject ILogger<EmailCampaignManager> Logger
@inherits EventAwareComponentBase

<PageTitle>Email Campaign</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement}")">
    <Authorized>
        @if (_isLoading)
        {
            <p>Loading campaign details...</p>
        }
        else if (Campaign == null)
        {
            <div class="alert alert-danger">Campaign not found.</div>
        }
        else if (Campaign != null && Campaign.Status == EmailCampaignStatus.Sent)
        {
            <div class="alert alert-success mt-3">Campaign Finished</div>
        }
        else
        {
            <div class="card p-4 shadow-lg">
                <h3>@Campaign?.Name</h3>

                <div class="progress my-3">
                    <div class="progress-bar" role="progressbar" style="width: @ProgressPercent%;"
                        aria-valuenow="@ProgressPercent" aria-valuemin="0" aria-valuemax="100">
                        @ProgressPercent%
                    </div>
                </div>

                <p>Sent @SentCount of @TotalRecipients emails...</p>

                <div class="d-flex gap-3">
                    <button class="btn btn-success" @onclick="StartCampaign" disabled="@_isProcessing">
                        <i class="bi bi-play-fill"></i> Start
                    </button>

                    <button class="btn btn-warning" @onclick="PauseCampaign" disabled="@_isProcessing">
                        <i class="bi bi-pause-fill"></i> Pause
                    </button>

                    <button class="btn btn-danger" @onclick="StopCampaign" disabled="@_isProcessing">
                        <i class="bi bi-x-circle-fill"></i> Cancel
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(_statusMessage))
                {
                    <div class="alert alert-info mt-3">@_statusMessage</div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public Guid Id { get; set; }
    private EmailCampaign? Campaign { get; set; }
    private int ProgressPercent { get; set; }
    private int SentCount { get; set; }
    private int TotalRecipients { get; set; }
    private string? _statusMessage;
    private bool _isLoading = true;
    private bool _isProcessing;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToEvent(UiEvents.EmailCampaignProgressUpdated);
        SubscribeToEvent(UiEvents.EmailCampaignCompleted);
        SubscribeToEvent(UiEvents.EmailCampaignStarted);
        SubscribeToEvent(UiEvents.EmailCampaignPaused);
        SubscribeToEvent(UiEvents.EmailCampaignCancelled);

        await LoadCampaign();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        if (payload != null)
        {
            dynamic data = payload;
            if (data.Id != null && Id.Equals(data.Id))
            {
                if (eventName == UiEvents.EmailCampaignProgressUpdated)
                {
                    ProgressPercent = data.Progress;
                    SentCount = data.Sent;
                    TotalRecipients = data.Total;
                }
                else if (eventName == UiEvents.EmailCampaignCompleted ||
                eventName == UiEvents.EmailCampaignPaused ||
                eventName == UiEvents.EmailCampaignCancelled ||
                eventName == UiEvents.EmailCampaignStarted)
                {
                    await LoadCampaign();
                }
            }
        }

        await InvokeAsync(StateHasChanged);
        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadCampaign()
    {
        try
        {
            _isLoading = true;
            Campaign = await EmailCampaignService.GetByIdAsync(Id);
            if (Campaign != null)
            {
                TotalRecipients = Campaign.EmailRecipients?.Count() ?? 0;
                SentCount = Campaign.EmailRecipients?.Count(r => r.Status != EmailRecipientStatus.Pending) ?? 0;
                ProgressPercent = TotalRecipients == 0 ? 0 : (int)Math.Round((double)SentCount / TotalRecipients * 100);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error loading campaign: {ex.Message}", ex.Message);
            _statusMessage = "Failed to load campaign details.";
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task StartCampaign()
    {
        await ExecuteCampaignAction(async () =>
        {
            await EmailCampaignService.StartCampaignAsync(Id);
            _statusMessage = "Campaign Started";
        });
    }

    private async Task PauseCampaign()
    {
        await ExecuteCampaignAction(async () =>
        {
            await EmailCampaignService.PauseCampaignAsync(Id);
            _statusMessage = "Campaign Paused";
        });
    }

    private async Task StopCampaign()
    {
        await ExecuteCampaignAction(async () =>
        {
            await EmailCampaignService.StopCampaignAsync(Id);
            _statusMessage = "Campaign Cancelled";
        });
    }

    private async Task ExecuteCampaignAction(Func<Task> campaignAction)
    {
        try
        {
            _isProcessing = true;
            await campaignAction();
        }
        catch (Exception ex)
        {
            Logger.LogError("Error updating campaign: {ex.Message}", ex.Message);
            _statusMessage = "Error processing campaign action.";
        }
        finally
        {
            _isProcessing = false;
        }
    }
}
