@page "/grades"
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject SchoolGradeService SchoolGradeService
@inject SystemGradeService SystemGradeService
@inject IDialogService DialogService
@inherits EventAwareComponentBase

<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to manage grades." />
        }
        else if (_loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }
        else
        {
            <MudTable Items="@_systemGrades" 
                      Hover="true" 
                      Striped="true" 
                      Dense="false"
                      Elevation="2">
                <HeaderContent>
                    <MudTh Style="width: 100px;">Enabled</MudTh>
                    <MudTh Style="width: 150px;">Grade</MudTh>
                    <MudTh Style="width: 200px;">Start Time</MudTh>
                    <MudTh Style="width: 200px;">End Time</MudTh>
                    <MudTh>Attributes</MudTh>
                </HeaderContent>
                <RowTemplate Context="systemGrade">
                    @{
                        var isChecked = _schoolGrades.Any(sg => sg.SystemGradeId == systemGrade.Id);
                        var schoolGrade = _schoolGrades.FirstOrDefault(sg => sg.SystemGradeId == systemGrade.Id);
                        var startTime = schoolGrade?.StartTime?.ToTimeSpan() ?? new TimeSpan(8, 0, 0);
                        var endTime = schoolGrade?.EndTime?.ToTimeSpan() ?? new TimeSpan(14, 0, 0);
                    }
                    <MudTd DataLabel="Enabled">
                        <MudSwitch T="bool" 
                                  Value="@isChecked" 
                                  ValueChanged="@(async (bool newValue) => await ToggleSchoolGrade(systemGrade.Id, newValue))" 
                                  Color="Color.Primary" />
                    </MudTd>
                    <MudTd DataLabel="Grade">
                        <strong>@systemGrade.Name</strong>
                    </MudTd>
                    <MudTd DataLabel="Start Time">
                        <MudTimePicker Label="Start Time"
                                       Time="@startTime"
                                       TimeChanged="@((TimeSpan? newTime) => UpdateSchoolGradeTime(systemGrade.Id, newTime, true))"
                                       Disabled="@(!isChecked)"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       AmPm="false" />
                    </MudTd>
                    <MudTd DataLabel="End Time">
                        <MudTimePicker Label="End Time"
                                       Time="@endTime"
                                       TimeChanged="@((TimeSpan? newTime) => UpdateSchoolGradeTime(systemGrade.Id, newTime, false))"
                                       Disabled="@(!isChecked)"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       AmPm="false" />
                    </MudTd>
                    <MudTd DataLabel="Attributes">
                        <MudStack Row="true" Spacing="1">
                            @if (systemGrade.MathGrade)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">Math</MudChip>
                            }
                            @if (systemGrade.CombinationGrade)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">Combination</MudChip>
                            }
                            @if (systemGrade.AchievementLevelRating)
                            {
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small">Achievement Level Rating</MudChip>
                            }
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private School? _selectedSchool;
    private bool _loading;
    private List<SystemGrade> _systemGrades = [];
    private List<SchoolGrade> _schoolGrades = [];

    protected override async Task OnInitializedAsync()
    {
        _systemGrades = await SystemGradeService.GetAllAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        if (_selectedSchool == null) return;
        await LoadGrades();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                if (payload is School school)
                {
                    _selectedSchool = school;
                    await LoadGrades();
                }
                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task ToggleSchoolGrade(int systemGradeId, bool isChecked)
    {
        if (_selectedSchool == null)
        {
            return;
        }

        _loading = true;
        await InvokeAsync(StateHasChanged);
        
        var existingSchoolGrade = await SchoolGradeService.GetBySystemGradeAndSchoolAsync(systemGradeId, _selectedSchool.Id);

        if (isChecked)
        {
            if (existingSchoolGrade == null)
            {
                var newSchoolGrade = new SchoolGrade
                    {
                        Id = Guid.NewGuid(),
                        SchoolId = _selectedSchool.Id,
                        SystemGradeId = systemGradeId,
                        StartTime = new TimeOnly(8, 0),
                        EndTime = new TimeOnly(14, 0)
                    };

                await SchoolGradeService.CreateAsync(newSchoolGrade);
                await LoadGrades();
            }
        }
        else
        {
            if (existingSchoolGrade != null)
            {
                var schoolGrade = await SchoolGradeService.GetByIdAsync(existingSchoolGrade.Id);
                if (schoolGrade != null)
                {
                    var registerClassCount = schoolGrade.RegisterClasses?.Count ?? 0;
                    var combinationCount = schoolGrade.Combinations?.Count ?? 0;
                    var hasRegisterClasses = registerClassCount > 0;
                    var hasCombinations = combinationCount > 0;

                    if (hasRegisterClasses || hasCombinations)
                    {
                        await ShowWarningDialog("Warning", $"You can't disable {existingSchoolGrade.SystemGrade.Name} because it has {registerClassCount} Register Classes and {combinationCount} Combinations assigned.");
                        _loading = false;
                        await InvokeAsync(StateHasChanged);
                        return;
                    }
                }

                await SchoolGradeService.DeleteAsync(existingSchoolGrade.Id);
                await LoadGrades();
            }
        }
        
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateSchoolGradeTime(int systemGradeId, TimeSpan? newTime, bool isStartTime)
    {
        if (_selectedSchool == null || newTime == null)
        {
            return;
        }

        var existingSchoolGrade = await SchoolGradeService.GetBySystemGradeAndSchoolAsync(systemGradeId, _selectedSchool.Id);
        if (existingSchoolGrade == null)
        {
            return;
        }

        var timeOnly = TimeOnly.FromTimeSpan(newTime.Value);
        
        var schoolGradeToUpdate = new SchoolGrade
        {
            Id = existingSchoolGrade.Id,
            SchoolId = existingSchoolGrade.SchoolId,
            SystemGradeId = existingSchoolGrade.SystemGradeId,
            StartTime = isStartTime ? timeOnly : existingSchoolGrade.StartTime,
            EndTime = isStartTime ? existingSchoolGrade.EndTime : timeOnly
        };

        await SchoolGradeService.UpdateAsync(schoolGradeToUpdate);
        await LoadGrades();
    }

    private async Task LoadGrades()
    {
        _loading = true;
        await InvokeAsync(StateHasChanged);
        if (_selectedSchool != null)
        {
            _schoolGrades = await SchoolGradeService.GetGradesForSchool(_selectedSchool.Id);
        }
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowWarningDialog(string title, string message)
    {
        await DialogService.ShowMessageBox(
            title,
            message,
            yesText: "OK");
    }
}
