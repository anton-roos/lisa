@page "/"
@rendermode InteractiveServer
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject LearnerService LearnerService
@inject ResultService ResultService
@inherits EventAwareComponentBase

<PageTitle>DCEG LEARN</PageTitle>

<AuthorizeView Context="_">
    <Authorized>
        <!-- System Administrator View -->
        <AuthorizeView Roles="@($"{Roles.SystemAdministrator}")">
            <Authorized>
                @if (_loading)
                {
                    <MudContainer Class="d-flex justify-center align-center" Style="height: 200px;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudContainer>
                }
                else
                {
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudCard>
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h5" Class="mb-2">Schools</MudText>
                                        <MudText Typo="Typo.h2">@_schoolCount</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudCard>
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h5" Class="mb-2">Learners</MudText>
                                        <MudText Typo="Typo.h2">@_learnerCount</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudCard>
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h5" Class="mb-2">Results Submitted</MudText>
                                        <MudText Typo="Typo.h2">@_resultCount</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                }
            </Authorized>
        </AuthorizeView>
        <!-- Teacher View -->
        <AuthorizeView Roles="@($"{Roles.Teacher}, {Roles.Principal}, {Roles.Administrator}")">
            <Authorized>
                @if (_loading)
                {
                    <MudContainer Class="d-flex justify-center align-center" Style="height: 200px;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudContainer>
                }
                else if (_selectedSchool != null)
                {
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                        <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-2">Welcome to the Learner Information System</MudText>
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6">@_selectedSchool.LongName</MudText>
                        
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudCard>
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h5" Class="mb-2">Learners</MudText>
                                        <MudText Typo="Typo.h2">@_schoolLearnerCount</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudCard>
                                    <MudCardContent Class="text-center">
                                        <MudText Typo="Typo.h5" Class="mb-2">Results Submitted</MudText>
                                        <MudText Typo="Typo.h2">@_schoolResultCount</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                }
            </Authorized>
        </AuthorizeView>
        <!-- Attendance Staff View -->
        <AuthorizeView Roles="@($"{Roles.Attendance}")">
            <Authorized>
                @if (_loading)
                {
                    <MudContainer Class="d-flex justify-center align-center" Style="height: 200px;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudContainer>
                }
                else if (_selectedSchool != null)
                {
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCard>
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="8">
                                                <SignInAndOutComponent @key="_selectedSchool?.Id" SelectedSchool="@_selectedSchool" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                }
            
            </Authorized>
        </AuthorizeView>

    </Authorized>
    <NotAuthorized>
        <Unauthenticated />
    </NotAuthorized>
</AuthorizeView>

@code {
    bool _loading;
    int _schoolCount;
    int _resultCount;
    int _learnerCount;

    School? _selectedSchool;
    int _schoolResultCount;
    int _schoolLearnerCount;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToEvent(UiEvents.SchoolsUpdated);
        _loading = true;
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        _schoolCount = await SchoolService.GetCountAsync();
        _resultCount = await ResultService.GetCountAsync();
        _learnerCount = await LearnerService.GetCountAsync();

        if (_selectedSchool != null)
        {
            _schoolResultCount = await ResultService.GetCountAsync(_selectedSchool.Id);
            _schoolLearnerCount = await LearnerService.GetCountAsync(_selectedSchool.Id);
        }
        _loading = false;
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        _selectedSchool = eventName switch
        {
            UiEvents.SchoolsUpdated => await SchoolService.GetSelectedSchoolAsync(),
            _ => _selectedSchool
        };
        await base.HandleEventAsync(eventName, payload);
    }
}
