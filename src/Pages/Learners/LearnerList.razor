@page "/learners"
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject LearnerService LearnerService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inherits EventAwareComponentBase

<PageTitle>Learners</PageTitle>
<AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal},{Roles.SchoolManagement},{Roles.Administrator}")">
    <Authorized>
        @if (_selectedSchool is null)
        {
            <NoSchoolSelected Message="Please select a school to view learners." />
        }
        else
        {
            <MudStack Spacing="3">
                <!-- Header with Add Button -->
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="AddLearner"
                               Disabled="@_isLoading">
                        Add Learner
                    </MudButton>
                </MudStack>

                <!-- Filters -->
                <MudPaper Elevation="2" Class="pa-4">
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="string" 
                                       Label="Status" 
                                       @bind-Value="SelectedStatus"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Disabled="@_isLoading">
                                <MudSelectItem T="string" Value="@("Active")">Active Only</MudSelectItem>
                                <MudSelectItem T="string" Value="@("Disabled")">Disabled Only</MudSelectItem>
                                <MudSelectItem T="string" Value="@("All")">All Learners</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="string" 
                                       Label="Filter by Grade" 
                                       @bind-Value="SelectedGradeId"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Clearable="true"
                                       Disabled="@_isLoading">
                                <MudSelectItem T="string" Value="@(string.Empty)">All Grades</MudSelectItem>
                                @if (AvailableGrades != null)
                                {
                                    @foreach (var grade in AvailableGrades)
                                    {
                                        <MudSelectItem T="string" Value="@grade.Id.ToString()">@grade.SystemGrade.Name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField T="string" 
                                          Label="Search by Name" 
                                          @bind-Value="SearchTerm"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          Immediate="true"
                                          Placeholder="Type name..."
                                          Disabled="@_isLoading" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="2">
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary"
                                       FullWidth="true"
                                       OnClick="ToggleSort"
                                       Style="height: 56px;"
                                       Disabled="@_isLoading">
                                Sort: @(_sortByLastName ? "Last Name" : "First Name")
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>

                <!-- Loading Indicator -->
                @if (_isLoading)
                {
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-2" />
                        <MudText Align="Align.Center" Typo="Typo.body2" Color="Color.Secondary">
                            Loading learners...
                        </MudText>
                    </MudPaper>
                }
                else if (!SortedLearners.Any())
                {
                    <MudAlert Severity="Severity.Info">
                        No learners found for <strong>@_selectedSchool.ShortName</strong> with the current filters.
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="@SortedLearners" 
                              Hover="true" 
                              Striped="true"
                              Elevation="2"
                              Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Code</MudTh>
                            <MudTh>Register Class</MudTh>
                            <MudTh>Care Group</MudTh>
                            <MudTh>Parents</MudTh>
                            <MudTh>Subjects</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="learner">
                            <MudTd DataLabel="Name">
                                <MudText Typo="Typo.body1">@learner.Surname, @learner.Name, @if (learner.RegisterClass?.SchoolGrade != null)
                                {
                                        @learner.RegisterClass.SchoolGrade.SystemGrade.Name
                                } </MudText>
                            </MudTd>
                            <MudTd DataLabel="Code">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@learner.Code</MudText>
                            </MudTd>
                            <MudTd DataLabel="Grade">
                                @if (learner.RegisterClass?.SchoolGrade != null)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info" OnClick="Promote">
                                        @learner.RegisterClass.Name
                                    </MudChip>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Error">Unassigned</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Care Group">
                                @if (learner.CareGroup != null)
                                {
                                    <MudText Typo="Typo.body2">@learner.CareGroup.Name</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">-</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Parents">
                                <MudText Typo="Typo.body2">@(learner.Parents?.Count() ?? 0)</MudText>
                            </MudTd>
                            <MudTd DataLabel="Subjects">
                                @if (learner.Active && learner.LearnerSubjects is not null && learner.LearnerSubjects.Any())
                                {
                                    <MudStack Row="true" Spacing="1" Wrap="Wrap.Wrap">
                                        @foreach (var subject in learner.LearnerSubjects.Take(3))
                                        {
                                            <MudChip T="string" 
                                                     Size="Size.Small"
                                                     Color="@(subject.Subject.SubjectType switch {
                                                         SubjectType.Compulsory => Color.Primary,
                                                         SubjectType.MathCombination => Color.Success,
                                                         SubjectType.Combination => Color.Error,
                                                         SubjectType.AdditionalSubject => Color.Secondary,
                                                         _ => Color.Default
                                                     })">
                                                @subject.Subject.Code
                                            </MudChip>
                                        }
                                        @if (learner.LearnerSubjects.Count() > 3)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Default">
                                                +@(learner.LearnerSubjects.Count() - 3)
                                            </MudChip>
                                        }
                                    </MudStack>
                                }
                                else if (!learner.Active)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Secondary">Inactive</MudChip>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">None</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Status">
                                @if (learner.IsDisabled)
                                {
                                    <MudTooltip Text="@($"Disabled on {learner.DisabledAt?.ToString("yyyy-MM-dd") ?? "Unknown"}: {learner.DisabledReason}")">
                                        <MudChip T="string" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Block">
                                            Disabled
                                        </MudChip>
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                                        Active
                                    </MudChip>
                                }
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudStack Row="true" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                   Color="Color.Primary" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => ViewLearner(learner))"
                                                   Title="View" />
                                    @if (!learner.IsDisabled)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                       Color="Color.Secondary" 
                                                       Size="Size.Small"
                                                       OnClick="@(() => EditLearner(learner))"
                                                       Title="Edit" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Block" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       OnClick="@(() => DisableLearner(learner))"
                                                       Title="Disable" />
                                    }
                                    else
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" 
                                                       Color="Color.Success" 
                                                       Size="Size.Small"
                                                       OnClick="@(() => EnableLearner(learner))"
                                                       Title="Enable" />
                                    }
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudStack>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Learner> _learners = [];
    private IEnumerable<Learner> FilteredLearners => ApplyFilters();
    private bool _sortByLastName = true;
    private IEnumerable<Learner> SortedLearners => _sortByLastName
        ? FilteredLearners.OrderBy(l => l.Surname).ThenBy(l => l.Name)
        : FilteredLearners.OrderBy(l => l.Name).ThenBy(l => l.Surname);
    private School? _selectedSchool;
    private bool _isLoading = true;

    private string? SelectedGradeId { get; set; }
    private string? SearchTerm { get; set; }
    private string SelectedStatus { get; set; } = "Active";
    private List<SchoolGrade>? AvailableGrades { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadLearners();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        if (eventName == UiEvents.SchoolSelected)
        {
            _selectedSchool = payload as School;
            await LoadLearners();
        }
        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadLearners()
    {
        try
        {
            _isLoading = true;
            _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
            if (_selectedSchool?.Id != null)
            {
                // Get all learners including disabled ones to allow filtering
                var allLearners = await LearnerService.GetAllLearnersIncludingDisabledAsync();
                _learners = allLearners.Where(l => l.SchoolId == _selectedSchool.Id).ToList();
                _learners.ForEach(l => l.LearnerSubjects = l.LearnerSubjects?.OrderBy(ls => ls.Subject.Order).ToList());

                AvailableGrades = _learners
                    .Where(l => l.RegisterClass?.SchoolGrade != null)
                    .Select(l => l.RegisterClass!.SchoolGrade!)
                    .DistinctBy(g => g.Id)
                    .ToList();
            }
            else
            {
                _learners = [];
                AvailableGrades = [];
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    private IEnumerable<Learner> ApplyFilters()
    {
        var query = _learners.AsEnumerable();

        // Apply status filter
        query = SelectedStatus switch
        {
            "Active" => query.Where(l => !l.IsDisabled),
            "Disabled" => query.Where(l => l.IsDisabled),
            "All" => query,
            _ => query.Where(l => !l.IsDisabled) // Default to active only
        };

        if (!string.IsNullOrEmpty(SelectedGradeId))
        {
            query = query.Where(l => l.RegisterClass?.SchoolGrade != null &&
                                     l.RegisterClass.SchoolGrade.Id == Guid.Parse(SelectedGradeId));
        }

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            var term = SearchTerm.Trim().ToLower();
            query = query.Where(l => ($"{l.Surname} {l.Name}").ToLower().Contains(term));
        }

        return query;
    }

    private void ToggleSort()
    {
        _sortByLastName = !_sortByLastName;
    }

    private void EditLearner(Learner learner)
    {
        NavigationManager.NavigateTo($"/learners/manage/{learner.Id}");
    }

    private async Task ViewLearner(Learner learner)
    {
        var parameters = new DialogParameters<LearnerViewDialog>
        {
            { x => x.LearnerId, learner.Id }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        await DialogService.ShowAsync<LearnerViewDialog>($"Learner: {learner.Surname}, {learner.Name}", parameters, options);
    }

    private void AddLearner()
    {
        NavigationManager.NavigateTo("/learners/manage");
    }

    private async Task DisableLearner(Learner learner)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowMessageBox(
            title: "Disable Learner",
            message: $"Are you sure you want to disable {learner.Surname}, {learner.Name}? This will prevent them from appearing in most views.",
            yesText: "Disable",
            cancelText: "Cancel",
            options: options);

        if (dialog == true)
        {
            var reason = $"Learner disabled from UI on {DateTime.Now:yyyy-MM-dd HH:mm}";
            await LearnerService.DisableLearnerAsync(learner.Id, reason);
            await LoadLearners();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Promote()
    {
        var dialog = await DialogService.ShowMessageBox(
            title: "Promote Learner",
            message: $"Are you sure you want to promote Learner?",
            yesText: "Promoted",
            cancelText: "Not Promoted"
            );
    }

    private async Task EnableLearner(Learner learner)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowMessageBox(
            title: "Enable Learner",
            message: $"Are you sure you want to enable {learner.Surname}, {learner.Name}?",
            yesText: "Enable",
            cancelText: "Cancel",
            options: options);

        if (dialog == true)
        {
            await LearnerService.EnableLearnerAsync(learner.Id);
            await LoadLearners();
            await InvokeAsync(StateHasChanged);
        }
    }
}
