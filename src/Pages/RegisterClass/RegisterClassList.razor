@page "/register-class"
@using Lisa.Models.Entities
@inject SchoolService SchoolService
@inject RegisterClassService RegisterClassService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inherits EventAwareComponentBase
@inject ILogger<RegisterClassList> Logger

<PageTitle>Register Classes</PageTitle>
<AuthorizeView Context="_" Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to view register classes." />
        }
        else
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddRegisterClass"
                       Class="mb-3">
                Add Register Class
            </MudButton>

            @if (!_registerClasses.Any())
            {
                <MudAlert Severity="Severity.Info" Class="mt-3">
                    No register classes found for <strong>@_selectedSchool.ShortName</strong>.
                </MudAlert>
            }
            else
            {
                <MudTable Items="@_registerClasses" 
                          Hover="true" 
                          Striped="true" 
                          Dense="true"
                          Elevation="2">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Grade</MudTh>
                        <MudTh>Learner Count</MudTh>
                        <MudTh>Teacher</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="registerClass">
                        <MudTd DataLabel="Name">@registerClass.Name</MudTd>
                        <MudTd DataLabel="Grade">
                            @if (registerClass.SchoolGrade != null)
                            {
                                @registerClass.SchoolGrade.SystemGrade.Name
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">Grade not found</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Learner Count">
                            @(registerClass.Learners?.Count ?? 0)
                        </MudTd>
                        <MudTd DataLabel="Teacher">
                            @if (registerClass.User != null)
                            {
                                @registerClass.User.Surname @registerClass.User.Name
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">No Teacher</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                           Color="Color.Primary" 
                                           Size="Size.Small"
                                           OnClick="@(() => ViewRegisterClass(registerClass))"
                                           Title="View" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                           Color="Color.Secondary" 
                                           Size="Size.Small"
                                           OnClick="@(() => EditRegisterClass(registerClass))"
                                           Title="Edit" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           OnClick="@(() => ShowConfirmationAsync(registerClass))"
                                           Title="Delete" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private School? _selectedSchool;
    private List<RegisterClass> _registerClasses = [];

    protected override async Task OnInitializedAsync()
    {
        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);
        await LoadRegisterClasses();
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                _selectedSchool = payload as School;
                await LoadRegisterClasses();
                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadRegisterClasses()
    {
        var unfiltedRegisterClasses = await RegisterClassService.GetAllAsync();
        if (_selectedSchool == null)
        {
            Logger.LogError("SelectedSchool was null when trying to load register classes.");
            return;
        }

        _registerClasses = unfiltedRegisterClasses
            .Where(rc => rc.SchoolGrade != null && rc.SchoolGrade.SchoolId == _selectedSchool.Id)
            .ToList();
    }

    private async Task EditRegisterClass(RegisterClass registerClass)
    {
        var parameters = new DialogParameters<RegisterClassEditDialog>
        {
            { x => x.RegisterClassId, registerClass.Id }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<RegisterClassEditDialog>("Edit Register Class", parameters, options);
        var result = await dialog.Result;

        if (result != null)
        {
            await LoadRegisterClasses();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ViewRegisterClass(RegisterClass registerClass)
    {
        var parameters = new DialogParameters<RegisterClassViewDialog>
        {
            { x => x.RegisterClassId, registerClass.Id }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        await DialogService.ShowAsync<RegisterClassViewDialog>($"Register Class: {registerClass.Name}", parameters, options);
    }

    private async Task ShowConfirmationAsync(RegisterClass? registerClass)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowMessageBox(
            title: "Delete Register Class",
            message: "This will delete the record. Once deleted can not be rolled back. Do you want to proceed?",
            yesText: "Delete",
            cancelText: "Cancel",
            options: options);

        if (dialog == true && registerClass != null)
        {
            await RegisterClassService.DeleteAsync(registerClass.Id);
            await LoadRegisterClasses();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddRegisterClass()
    {
        var parameters = new DialogParameters<RegisterClassEditDialog>
        {
            { x => x.RegisterClassId, null }
        };

        var options = new DialogOptions 
        { 
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<RegisterClassEditDialog>("Add Register Class", parameters, options);
        var result = await dialog.Result;
        
        if (result != null)
        {
            await LoadRegisterClasses();
            await InvokeAsync(StateHasChanged);
        }
    }
}
