@page "/subjects"
@using Lisa.Models.Entities
@inject NavigationManager Navigation
@inject SubjectService SubjectService
@inject IDialogService DialogService

<AuthorizeView Roles="@Roles.SystemAdministrator">
    <Authorized>
        <PageTitle>Subjects</PageTitle>

        <MudStack Row="true" Spacing="2" Class="mb-3">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddSubject"
                       Style="height: 38px"
                       Class="mt-1"
                        >
                Add Subject
            </MudButton>
            <MudTextField @bind-Value="_searchText"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Placeholder="Type to filter subjects..."
                          Immediate="true"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Style="max-width: 300px;" />
        </MudStack>

        @if (_subjects == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        }
        else if (!FilteredSubjects.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mt-3">
                No subjects found matching your search.
            </MudAlert>
        }
        else
        {
            <MudTable Items="@FilteredSubjects" 
                      Hover="true" 
                      Striped="true" 
                      Dense="true"
                      Elevation="2">
                <HeaderContent>
                    @if (string.IsNullOrWhiteSpace(_searchText))
                    {
                        <MudTh Style="width: 120px;">Order</MudTh>
                    }
                    <MudTh>Name</MudTh>
                    <MudTh>Code</MudTh>
                    <MudTh>Grades</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate Context="subject">
                    @if (string.IsNullOrWhiteSpace(_searchText))
                    {
                        <MudTd DataLabel="Order">
                            <div class="d-flex align-items-center gap-1">
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" 
                                               Color="Color.Default" 
                                               Size="Size.Small"
                                               OnClick="@(() => MoveUp(subject))"
                                               Disabled="@IsFirst(subject)"
                                               Title="Move Up" />
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" 
                                               Color="Color.Default" 
                                               Size="Size.Small"
                                               OnClick="@(() => MoveDown(subject))"
                                               Disabled="@IsLast(subject)"
                                               Title="Move Down" />
                            </div>
                        </MudTd>
                    }
                    <MudTd DataLabel="Name">
                        <strong>@subject.Name</strong>
                    </MudTd>
                    <MudTd DataLabel="Code">
                        @subject.Code
                    </MudTd>
                    <MudTd DataLabel="Grades">
                        <MudChip T="string" Color="Color.Info" Size="Size.Small">@GetFirstAndLastGrade(subject)</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Type">
                        <MudChip T="string" 
                                 Color="@GetMudColorForSubjectType(subject.SubjectType)" 
                                 Size="Size.Small">
                            @GetPillTextForSubjectType(subject.SubjectType)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                       Color="Color.Primary" 
                                       Size="Size.Small"
                                       OnClick="@(() => ViewSubject(subject))"
                                       Title="View" />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                       Color="Color.Secondary" 
                                       Size="Size.Small"
                                       OnClick="@(() => EditSubject(subject))"
                                       Title="Edit" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Color="Color.Error" 
                                       Size="Size.Small"
                                       OnClick="@(() => DeleteSubject(subject))"
                                       Title="Delete" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Subject>? _subjects;
    private string _searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _subjects = await SubjectService.GetAllAsync();
    }

    private IEnumerable<Subject> FilteredSubjects
    => _subjects?.Where(s =>
    string.IsNullOrWhiteSpace(_searchText)
    || (s.Name ?? "").Contains(_searchText, StringComparison.OrdinalIgnoreCase)
    || (s.Code ?? "").Contains(_searchText, StringComparison.OrdinalIgnoreCase)
    || (s.Description ?? "").Contains(_searchText, StringComparison.OrdinalIgnoreCase)
    ) ?? [];

    private void AddSubject()
    {
        Navigation.NavigateTo("/subjects/add");
    }

    private void ViewSubject(Subject subject)
    {
        Navigation.NavigateTo($"/subjects/details/{subject.Id}");
    }

    private void EditSubject(Subject subject)
    {
        Navigation.NavigateTo($"/subjects/edit/{subject.Id}");
    }

    private async Task DeleteSubject(Subject? subject)
    {
        if (subject is null) return;

        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{subject.Name}'?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await SubjectService.DeleteAsync(subject.Id);
            _subjects = await SubjectService.GetAllAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private Color GetMudColorForSubjectType(SubjectType subjectType) => subjectType switch
    {
        SubjectType.Compulsory => Color.Primary,
        SubjectType.Combination => Color.Error,
        SubjectType.MathCombination => Color.Success,
        _ => Color.Default
    };

    private string GetPillTextForSubjectType(SubjectType subjectType) => subjectType switch
    {
        SubjectType.Compulsory => "Compulsory",
        SubjectType.Combination => "Combination",
        SubjectType.MathCombination => "Math",
        _ => ""
    };

    private string GetFirstAndLastGrade(Subject subject)
    {
        if (subject.GradesApplicable == null || !subject.GradesApplicable.Any())
            return string.Empty;

        var firstGrade = subject.GradesApplicable.First();
        var lastGrade = subject.GradesApplicable.Last();

        var firstGradeName = GetGradeName(firstGrade);
        var lastGradeName = GetGradeName(lastGrade);

        return firstGrade == lastGrade
        ? $"Gr {firstGradeName}"
        : $"Gr {firstGradeName} - {lastGradeName}";
    }

    private string GetGradeName(int grade) => grade switch
    {
        -2 => "RRR",
        -1 => "RR",
        0 => "R",
        _ => grade.ToString()
    };

    private async Task MoveUp(Subject subject)
    {
        if (_subjects == null) return;
        
        var index = _subjects.IndexOf(subject);
        if (index > 0)
        {
            _subjects.RemoveAt(index);
            _subjects.Insert(index - 1, subject);
            await SaveOrderChanges();
        }
    }

    private async Task MoveDown(Subject subject)
    {
        if (_subjects == null) return;
        
        var index = _subjects.IndexOf(subject);
        if (index < _subjects.Count - 1)
        {
            _subjects.RemoveAt(index);
            _subjects.Insert(index + 1, subject);
            await SaveOrderChanges();
        }
    }

    private bool IsFirst(Subject subject)
    {
        if (_subjects == null || !FilteredSubjects.Any()) return true;
        return FilteredSubjects.First() == subject;
    }

    private bool IsLast(Subject subject)
    {
        if (_subjects == null || !FilteredSubjects.Any()) return true;
        return FilteredSubjects.Last() == subject;
    }

    private async Task SaveOrderChanges()
    {
        if (_subjects is not null)
            for (var i = 0; i < _subjects.Count; i++)
            {
                _subjects[i].Order = i;
            }

        if (_subjects != null) await SubjectService.UpdateOrderAsync(_subjects);
        _subjects = await SubjectService.GetAllAsync();
        await InvokeAsync(StateHasChanged);
    }
}
