@page "/users"
@inject NavigationManager Navigation
@inject SchoolService SchoolService
@inject UserService UserService
@inherits EventAwareComponentBase

<PageTitle>Staff</PageTitle>
<AuthorizeView Roles="@($"{Roles.SystemAdministrator},{Roles.Principal}")">
    <Authorized>
        @if (_selectedSchool == null)
        {
            <NoSchoolSelected Message="Please select a school to manage staff." />
        }
        else
        {
            @if (_users == null)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else
            {
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Class="mb-3">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="GoToAddUser"
                              Class="me-4">
                        Add Staff Member
                    </MudButton>

                    <!-- Search Filter -->
                    <MudTextField @bind-Value="_searchQuery"
                                Placeholder="Search users..."
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                IconSize="Size.Medium"
                                Immediate="true"
                                Variant="Variant.Outlined"
                                Margin="Margin.Dense"
                                Style="max-width: 300px;" />

                    <!-- Role Filter Buttons -->
                    <MudChipSet T="string" @bind-SelectedValue="_selectedRole" 
                               Filter="true" 
                               Mandatory="false"
                               SelectionMode="SelectionMode.SingleSelection">
                        @foreach (var role in _availableRoles)
                        {
                            <MudChip T="string" Value="@role" Color="Color.Primary">@role</MudChip>
                        }
                    </MudChipSet>
                </MudStack>

                @if (!FilteredUsers.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3">
                        No staff members found matching your search/filter.
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="@FilteredUsers" 
                              Hover="true" 
                              Striped="true" 
                              Dense="true"
                              Elevation="2">
                        <HeaderContent>
                            <MudTh>Abbreviation</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Roles</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="user">
                            <MudTd DataLabel="Abbreviation">
                                @if (!string.IsNullOrWhiteSpace(user.Abbreviation))
                                {
                                    <MudChip T="string" Color="Color.Secondary" Size="Size.Small">@user.Abbreviation</MudChip>
                                }
                            </MudTd>
                            <MudTd DataLabel="Name">@user.Surname @user.Name</MudTd>
                            <MudTd DataLabel="Email">@user.Email</MudTd>
                            <MudTd DataLabel="Roles">
                                @foreach (var role in user.Roles)
                                {
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="me-1">@role</MudChip>
                                }
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                               Color="Color.Secondary" 
                                               Size="Size.Small"
                                               OnClick="@(() => EditUser(user.Id))"
                                               Title="Edit" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Color="Color.Error" 
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteUser(user))"
                                               Title="Delete" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            }
        }
    </Authorized>
    <NotAuthorized>
        <Unauthorized/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private School? _selectedSchool;
    private List<User>? _users;
    private string? _selectedRole;
    private string _searchQuery = string.Empty;

    private readonly List<string> _availableRoles =
    [
        Roles.Principal,
        Roles.Administrator,
        Roles.SchoolManagement,
        Roles.SystemAdministrator,
        Roles.Teacher,
        Roles.Attendance,
        Roles.Reception
    ];

    private bool _isCurrentUserSystemAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        _isCurrentUserSystemAdmin = user.IsInRole(Roles.SystemAdministrator);

        if (!_isCurrentUserSystemAdmin)
        {
            _availableRoles.Remove(Roles.SystemAdministrator);
        }

        _selectedSchool = await SchoolService.GetSelectedSchoolAsync();
        SubscribeToEvent(UiEvents.SchoolSelected);

        if (_selectedSchool != null)
        {
            await LoadUsers();
        }
    }

    protected override async Task HandleEventAsync(string eventName, object? payload)
    {
        switch (eventName)
        {
            case UiEvents.SchoolSelected:
                if (payload is School school)
                {
                    _selectedSchool = school;
                    await LoadUsers();
                }

                break;
        }

        await base.HandleEventAsync(eventName, payload);
    }

    private async Task LoadUsers()
    {
        if (_selectedSchool == null)
            throw new InvalidOperationException("No school selected.");

        _users = await UserService.GetAllByRoleAndSchoolAsync(_availableRoles.ToArray(), _selectedSchool.Id);

        if (!_isCurrentUserSystemAdmin && _users != null)
        {
            _users = _users.Where(u => !u.Roles.Contains(Roles.SystemAdministrator)).ToList();
        }
    }

    private IEnumerable<User> FilteredUsers
    {
        get
        {
            if (_users == null)
                return [];
            
            return _users.Where(u =>
                (string.IsNullOrEmpty(_selectedRole) || u.Roles.Contains(_selectedRole)) &&
                (string.IsNullOrWhiteSpace(_searchQuery) ||
                 u.Name!.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                 u.Surname!.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                 (u.Abbreviation?.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
                ));
        }
    }

    private void GoToAddUser()
    {
        Navigation.NavigateTo("/users/manage");
    }

    private void EditUser(Guid userId)
    {
        Navigation.NavigateTo($"/users/manage/{userId}");
    }

    private async Task DeleteUser(User user)
    {
        await UserService.DeleteAsync(user.Id);
        await LoadUsers();
        await InvokeAsync(StateHasChanged);
    }
}
